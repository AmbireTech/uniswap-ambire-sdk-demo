{"version":3,"sources":["nft/components/bag/profile/ListingModal.css.ts","nft/components/bag/profile/utils.ts","nft/components/bag/profile/ListingButton.tsx"],"names":["chevron","chevronDown","sectionDivider","button","listingModalIcon","warningTooltip","listingSectionBorder","updateStatus","listing","newStatus","rows","setRows","callback","rowsCopy","index","findIndex","n","status","approveCollectionRow","collectionRow","collectionsRequiringApproval","setCollectionsRequiringApproval","signer","looksRareAddress","pauseAllRows","a","ListingStatus","SIGNING","marketplace","collectionAddress","spender","name","OPENSEA_CROSS_CHAIN_CONDUIT","LOOKSRARE_MARKETPLACE_CONTRACT","X2Y2_TRANSFER_CONTRACT","approveCollection","REJECTED","FAILED","signListingRow","listings","setListings","provider","getLooksRareNonce","setLooksRareNonce","looksRareNonce","asset","signListing","res","APPROVED","getTotalEthValue","sellAssets","total","reduce","newListings","length","maxListing","b","price","maxFee","fee","LOOKS_RARE_CREATOR_BASIS_POINTS","basisPoints","Math","round","Number","EPSILON","getListings","newCollectionsToApprove","forEach","marketplaces","newListing","images","smallImageUrl","icon","tokenId","DEFINED","find","push","some","asset_contract","address","newCollectionRow","image_url","getListingState","allListingsPending","allListingsDefined","allListingsApproved","allCollectionsPending","allCollectionsDefined","anyActiveSigning","anyActiveFailures","anyActiveRejections","anyPaused","collection","PENDING","PAUSED","verifyStatus","pauseRow","row","resetRow","ListingButton","onClick","buttonText","showWarningOverride","useSellAsset","state","addMarketplaceWarning","removeAllMarketplaceWarnings","listingStatus","useNFTList","setListingStatus","useState","showWarning","setShowWarning","canContinue","setCanContinue","warningRef","useRef","useOnClickOutside","useEffect","useMemo","noMarketplacesSelected","undefined","missingExpiration","expirationTime","Date","now","invalidExpiration","isNaN","overMaxExpiration","listingsMissingPrice","listingsBelowFloor","listingsAboveSellOrderFloor","invalidPrices","floorPrice","overrideFloorPrice","floor_sell_order_price","continueCheck","pluralize","disableListButton","warningMessage","warningWrappedClick","message","addWarningMessages","position","width","className","bodySmall","styles","transition","color","zIndex","borderRadius","backgroundColor","height","maxWidth","left","bottom","flexWrap","style","ref","marginLeft","marginRight","paddingTop","fill","cursor","as","border","includes","type","opacity","CONTINUE","gap","stroke"],"mappings":"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","file":"static/js/0.5e26fdfe.chunk.js","sourcesContent":["import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/profile/ListingModal.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/profile/ListingModal.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xM2J4ZzQyIHsKICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOwogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEzYnhnNDYgewogIGxpbmUtaGVpZ2h0OiAxOHB4Owp9Ci5fMTNieGc0OCB7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBtYXJnaW4tbGVmdDogLTJweDsKICBtYXJnaW4tcmlnaHQ6IDRweDsKfQouXzEzYnhnNGEgewogIGJveC1zaGFkb3c6IDBweCA0cHggMTZweCByZ2JhKDEwLCAxMCwgNTksIDAuMik7Cn0=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var chevron = 'rgw6ez17x rgw6ez119 rgw6ez7p9 rgw6ezo9 rgw6ezol';\nexport var chevronDown = '_13bxg42';\nexport var sectionDivider = 'rgw6ez7b9 rgw6ezux rgw6ez153 rgw6ez7j1 rgw6ez79p rgw6ez4y3';\nexport var button = '_13bxg46 rgw6ez18f rgw6ez153 rgw6ez42r rgw6ezcx rgw6ezax rgw6ez419 rgw6ez3l rgw6ez443 rgw6ez4x rgw6ez7ax';\nexport var listingModalIcon = '_13bxg48 rgw6ez7j5 rgw6ez79p rgw6ez4y9';\nexport var warningTooltip = '_13bxg4a rgw6ez2kx rgw6ez2ff rgw6ez24f rgw6ez2a9';\nexport var listingSectionBorder = 'rgw6ez2qf rgw6ez7ap rgw6ez4y3 rgw6ez79p rgw6ez7j5';","import type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { LOOKSRARE_MARKETPLACE_CONTRACT, X2Y2_TRANSFER_CONTRACT } from 'nft/queries'\nimport { OPENSEA_CROSS_CHAIN_CONDUIT } from 'nft/queries/openSea'\nimport { AssetRow, CollectionRow, ListingMarket, ListingRow, ListingStatus, WalletAsset } from 'nft/types'\nimport { approveCollection, LOOKS_RARE_CREATOR_BASIS_POINTS, signListing } from 'nft/utils/listNfts'\nimport { Dispatch } from 'react'\n\nexport const updateStatus = ({\n  listing,\n  newStatus,\n  rows,\n  setRows,\n  callback,\n}: {\n  listing: AssetRow\n  newStatus: ListingStatus\n  rows: AssetRow[]\n  setRows: Dispatch<AssetRow[]>\n  callback?: () => Promise<void>\n}) => {\n  const rowsCopy = [...rows]\n  const index = rows.findIndex((n) => n === listing)\n  listing.status = newStatus\n  if (callback) listing.callback = callback\n  rowsCopy[index] = listing\n  setRows(rowsCopy)\n}\n\nexport async function approveCollectionRow(\n  collectionRow: CollectionRow,\n  collectionsRequiringApproval: CollectionRow[],\n  setCollectionsRequiringApproval: Dispatch<CollectionRow[]>,\n  signer: JsonRpcSigner,\n  looksRareAddress: string,\n  pauseAllRows: () => void\n) {\n  updateStatus({\n    listing: collectionRow,\n    newStatus: ListingStatus.SIGNING,\n    rows: collectionsRequiringApproval,\n    setRows: setCollectionsRequiringApproval as Dispatch<AssetRow[]>,\n    callback: () =>\n      approveCollectionRow(\n        collectionRow,\n        collectionsRequiringApproval,\n        setCollectionsRequiringApproval,\n        signer,\n        looksRareAddress,\n        pauseAllRows\n      ),\n  })\n  const { marketplace, collectionAddress } = collectionRow\n  const spender =\n    marketplace.name === 'OpenSea'\n      ? OPENSEA_CROSS_CHAIN_CONDUIT\n      : marketplace.name === 'Rarible'\n      ? LOOKSRARE_MARKETPLACE_CONTRACT\n      : marketplace.name === 'X2Y2'\n      ? X2Y2_TRANSFER_CONTRACT\n      : looksRareAddress\n  await approveCollection(spender ?? '', collectionAddress, signer, (newStatus: ListingStatus) =>\n    updateStatus({\n      listing: collectionRow,\n      newStatus,\n      rows: collectionsRequiringApproval,\n      setRows: setCollectionsRequiringApproval as Dispatch<AssetRow[]>,\n    })\n  )\n  if (collectionRow.status === ListingStatus.REJECTED || collectionRow.status === ListingStatus.FAILED) pauseAllRows()\n}\n\nexport async function signListingRow(\n  listing: ListingRow,\n  listings: ListingRow[],\n  setListings: Dispatch<ListingRow[]>,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  getLooksRareNonce: () => number,\n  setLooksRareNonce: (nonce: number) => void,\n  pauseAllRows: () => void\n) {\n  const looksRareNonce = getLooksRareNonce()\n  updateStatus({\n    listing,\n    newStatus: ListingStatus.SIGNING,\n    rows: listings,\n    setRows: setListings as Dispatch<AssetRow[]>,\n    callback: () => {\n      return signListingRow(\n        listing,\n        listings,\n        setListings,\n        signer,\n        provider,\n        getLooksRareNonce,\n        setLooksRareNonce,\n        pauseAllRows\n      )\n    },\n  })\n  const { asset, marketplace } = listing\n  const res = await signListing(marketplace, asset, signer, provider, looksRareNonce, (newStatus: ListingStatus) =>\n    updateStatus({\n      listing,\n      newStatus,\n      rows: listings,\n      setRows: setListings as Dispatch<AssetRow[]>,\n    })\n  )\n  if (listing.status === ListingStatus.REJECTED) pauseAllRows()\n  else {\n    res && listing.marketplace.name === 'LooksRare' && setLooksRareNonce(looksRareNonce + 1)\n    const newStatus = res ? ListingStatus.APPROVED : ListingStatus.FAILED\n    updateStatus({\n      listing,\n      newStatus,\n      rows: listings,\n      setRows: setListings as Dispatch<AssetRow[]>,\n    })\n  }\n}\n\nexport const getTotalEthValue = (sellAssets: WalletAsset[]) => {\n  const total = sellAssets.reduce((total, asset: WalletAsset) => {\n    if (asset.newListings?.length) {\n      const maxListing = asset.newListings.reduce((a, b) => ((a.price ?? 0) > (b.price ?? 0) ? a : b))\n      // LooksRare is a unique case where creator royalties are a flat 0.5% or 50 basis points\n      const maxFee =\n        maxListing.marketplace.fee +\n        (maxListing.marketplace.name === 'LooksRare' ? LOOKS_RARE_CREATOR_BASIS_POINTS : asset.basisPoints) / 100\n      return total + (maxListing.price ?? 0) - (maxListing.price ?? 0) * (maxFee / 100)\n    }\n    return total\n  }, 0)\n  return total ? Math.round(total * 100 + Number.EPSILON) / 100 : 0\n}\n\nexport const getListings = (sellAssets: WalletAsset[]): [CollectionRow[], ListingRow[]] => {\n  const newCollectionsToApprove: CollectionRow[] = []\n\n  const newListings: ListingRow[] = []\n  sellAssets.forEach((asset) => {\n    asset.marketplaces?.forEach((marketplace: ListingMarket) => {\n      const newListing = {\n        images: [asset.smallImageUrl, marketplace.icon],\n        name: asset.name || `#${asset.tokenId}`,\n        status: ListingStatus.DEFINED,\n        asset,\n        marketplace,\n        price: asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price,\n      }\n      newListings.push(newListing)\n      if (\n        !newCollectionsToApprove.some(\n          (collectionRow: CollectionRow) =>\n            collectionRow.collectionAddress === asset.asset_contract.address &&\n            collectionRow.marketplace.name === marketplace.name\n        )\n      ) {\n        const newCollectionRow = {\n          images: [asset.asset_contract.image_url, marketplace.icon],\n          name: asset.asset_contract.name,\n          status: ListingStatus.DEFINED,\n          collectionAddress: asset.asset_contract.address,\n          marketplace,\n        }\n        newCollectionsToApprove.push(newCollectionRow)\n      }\n    })\n  })\n  return [newCollectionsToApprove, newListings]\n}\n\nexport type ListingState = {\n  allListingsPending: boolean\n  allListingsDefined: boolean\n  allListingsApproved: boolean\n  allCollectionsPending: boolean\n  allCollectionsDefined: boolean\n  anyActiveSigning: boolean\n  anyActiveFailures: boolean\n  anyActiveRejections: boolean\n  anyPaused: boolean\n}\n\nexport const getListingState = (\n  collectionsRequiringApproval: CollectionRow[],\n  listings: ListingRow[]\n): ListingState => {\n  let allListingsPending = true\n  let allListingsDefined = true\n  let allListingsApproved = true\n  let allCollectionsPending = true\n  let allCollectionsDefined = true\n  let anyActiveSigning = false\n  let anyActiveFailures = false\n  let anyActiveRejections = false\n  let anyPaused = false\n\n  if (collectionsRequiringApproval.length === 0) {\n    allCollectionsDefined = allCollectionsPending = false\n  }\n  for (const collection of collectionsRequiringApproval) {\n    if (collection.status !== ListingStatus.PENDING) allCollectionsPending = false\n    if (collection.status !== ListingStatus.DEFINED) allCollectionsDefined = false\n    if (collection.status === ListingStatus.SIGNING) anyActiveSigning = true\n    else if (collection.status === ListingStatus.FAILED) anyActiveFailures = true\n    else if (collection.status === ListingStatus.REJECTED) anyActiveRejections = true\n    else if (collection.status === ListingStatus.PAUSED) anyPaused = true\n  }\n\n  if (listings.length === 0) {\n    allListingsApproved = allListingsDefined = allListingsPending = false\n  }\n  for (const listing of listings) {\n    if (listing.status !== ListingStatus.PENDING) allListingsPending = false\n    if (listing.status !== ListingStatus.DEFINED) allListingsDefined = false\n    if (listing.status !== ListingStatus.APPROVED) allListingsApproved = false\n    if (listing.status === ListingStatus.SIGNING) anyActiveSigning = true\n    else if (listing.status === ListingStatus.FAILED) anyActiveFailures = true\n    else if (listing.status === ListingStatus.REJECTED) anyActiveRejections = true\n    else if (listing.status === ListingStatus.PAUSED) anyPaused = true\n  }\n  return {\n    allListingsPending,\n    allListingsDefined,\n    allListingsApproved,\n    allCollectionsPending,\n    allCollectionsDefined,\n    anyActiveSigning,\n    anyActiveFailures,\n    anyActiveRejections,\n    anyPaused,\n  }\n}\n\nexport const verifyStatus = (status: ListingStatus) => {\n  return status !== ListingStatus.PAUSED && status !== ListingStatus.APPROVED\n}\n\nexport const pauseRow = (row: AssetRow, rows: AssetRow[], setRows: Dispatch<AssetRow[]>) => {\n  if (row.status === ListingStatus.PENDING || row.status === ListingStatus.DEFINED)\n    updateStatus({\n      listing: row,\n      newStatus: ListingStatus.PAUSED,\n      rows,\n      setRows,\n    })\n}\n\nexport const resetRow = (row: AssetRow, rows: AssetRow[], setRows: Dispatch<AssetRow[]>) => {\n  if (\n    row.status === ListingStatus.PAUSED ||\n    row.status === ListingStatus.FAILED ||\n    row.status === ListingStatus.REJECTED\n  )\n    updateStatus({\n      listing: row,\n      newStatus: ListingStatus.DEFINED,\n      rows,\n      setRows,\n    })\n}\n","import { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport ms from 'ms.macro'\nimport { Box } from 'nft/components/Box'\nimport { Row } from 'nft/components/Flex'\nimport { ArrowRightIcon, HazardIcon, LoadingIcon, XMarkIcon } from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { useNFTList, useSellAsset } from 'nft/hooks'\nimport { Listing, ListingStatus, WalletAsset } from 'nft/types'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { useEffect, useMemo, useRef, useState } from 'react'\n\nimport * as styles from './ListingModal.css'\nimport { getListings } from './utils'\n\ninterface ListingButtonProps {\n  onClick: () => void\n  buttonText: string\n  showWarningOverride?: boolean\n}\n\nexport const ListingButton = ({ onClick, buttonText, showWarningOverride = false }: ListingButtonProps) => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const addMarketplaceWarning = useSellAsset((state) => state.addMarketplaceWarning)\n  const removeAllMarketplaceWarnings = useSellAsset((state) => state.removeAllMarketplaceWarnings)\n  const listingStatus = useNFTList((state) => state.listingStatus)\n  const setListingStatus = useNFTList((state) => state.setListingStatus)\n  const setListings = useNFTList((state) => state.setListings)\n  const setCollectionsRequiringApproval = useNFTList((state) => state.setCollectionsRequiringApproval)\n  const [showWarning, setShowWarning] = useState(false)\n  const [canContinue, setCanContinue] = useState(false)\n  const warningRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(warningRef, () => {\n    setShowWarning(false)\n  })\n\n  useEffect(() => {\n    const [newCollectionsToApprove, newListings] = getListings(sellAssets)\n    setListings(newListings)\n    setCollectionsRequiringApproval(newCollectionsToApprove)\n    setListingStatus(ListingStatus.DEFINED)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sellAssets])\n\n  const [\n    noMarketplacesSelected,\n    missingExpiration,\n    invalidExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n    invalidPrices,\n  ] = useMemo(() => {\n    const noMarketplacesSelected = sellAssets.some((asset: WalletAsset) => asset.marketplaces === undefined)\n    const missingExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && asset.expirationTime * 1000 - Date.now() < ms`60 seconds`\n    })\n    const invalidExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && isNaN(asset.expirationTime)\n    })\n    const overMaxExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && asset.expirationTime - Date.now() > ms`180 days`\n    })\n    const listingsMissingPrice: [WalletAsset, Listing][] = []\n    const listingsBelowFloor: [WalletAsset, Listing][] = []\n    const listingsAboveSellOrderFloor: [WalletAsset, Listing][] = []\n    const invalidPrices: [WalletAsset, Listing][] = []\n    for (const asset of sellAssets) {\n      if (asset.newListings) {\n        for (const listing of asset.newListings) {\n          if (!listing.price) listingsMissingPrice.push([asset, listing])\n          else if (isNaN(listing.price) || listing.price < 0) invalidPrices.push([asset, listing])\n          else if (listing.price < asset.floorPrice && !listing.overrideFloorPrice)\n            listingsBelowFloor.push([asset, listing])\n          else if (asset.floor_sell_order_price && listing.price > asset.floor_sell_order_price)\n            listingsAboveSellOrderFloor.push([asset, listing])\n        }\n      }\n    }\n    const continueCheck = listingsBelowFloor.length === 0 && listingsAboveSellOrderFloor.length === 0\n    setCanContinue(continueCheck)\n    return [\n      noMarketplacesSelected,\n      missingExpiration,\n      invalidExpiration,\n      overMaxExpiration,\n      listingsMissingPrice,\n      listingsBelowFloor,\n      listingsAboveSellOrderFloor,\n      invalidPrices,\n    ]\n  }, [sellAssets])\n\n  const [disableListButton, warningMessage] = useMemo(() => {\n    const disableListButton =\n      noMarketplacesSelected ||\n      missingExpiration ||\n      invalidExpiration ||\n      overMaxExpiration ||\n      invalidPrices.length > 0 ||\n      listingsMissingPrice.length > 0\n\n    const warningMessage = noMarketplacesSelected\n      ? 'No marketplaces selected'\n      : missingExpiration\n      ? 'Set duration'\n      : invalidExpiration\n      ? 'Invalid duration'\n      : overMaxExpiration\n      ? 'Max duration is 6 months'\n      : listingsMissingPrice.length > 0\n      ? `${listingsMissingPrice.length} item price${pluralize(listingsMissingPrice.length)} not set`\n      : invalidPrices.length > 0\n      ? `${invalidPrices.length} price${pluralize(invalidPrices.length)} are invalid`\n      : listingsBelowFloor.length > 0\n      ? `${listingsBelowFloor.length} item${pluralize(listingsBelowFloor.length)} listed below floor`\n      : listingsAboveSellOrderFloor.length > 0\n      ? `${listingsAboveSellOrderFloor.length} item${pluralize(listingsAboveSellOrderFloor.length)} already listed`\n      : ''\n    return [disableListButton, warningMessage]\n  }, [\n    noMarketplacesSelected,\n    missingExpiration,\n    invalidExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    invalidPrices,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n  ])\n\n  useEffect(() => {\n    setShowWarning(false)\n  }, [warningMessage])\n\n  const addWarningMessages = () => {\n    removeAllMarketplaceWarnings()\n    if (!missingExpiration && !noMarketplacesSelected) {\n      if (listingsMissingPrice.length > 0) {\n        for (const [asset, listing] of listingsMissingPrice) {\n          addMarketplaceWarning(asset, {\n            message: 'PLEASE SET A PRICE',\n            marketplace: listing.marketplace,\n          })\n        }\n      } else if (invalidPrices.length > 0) {\n        for (const [asset, listing] of invalidPrices) {\n          !listing.overrideFloorPrice &&\n            addMarketplaceWarning(asset, {\n              message: `INVALID PRICE`,\n              marketplace: listing.marketplace,\n            })\n        }\n      }\n    }\n    setShowWarning(true)\n  }\n\n  const warningWrappedClick = () => {\n    if ((!disableListButton && canContinue) || showWarningOverride) onClick()\n    else addWarningMessages()\n  }\n\n  return (\n    <Box position=\"relative\" width=\"full\">\n      {!showWarningOverride && showWarning && warningMessage.length > 0 && (\n        <Row\n          className={`${bodySmall} ${styles.warningTooltip}`}\n          transition=\"250\"\n          onClick={() => setShowWarning(false)}\n          color=\"textSecondary\"\n          zIndex=\"3\"\n          borderRadius=\"4\"\n          backgroundColor=\"backgroundSurface\"\n          height={!disableListButton ? '64' : '36'}\n          maxWidth=\"276\"\n          position=\"absolute\"\n          left=\"24\"\n          bottom=\"52\"\n          flexWrap={!disableListButton ? 'wrap' : 'nowrap'}\n          style={{ maxWidth: !disableListButton ? '225px' : '' }}\n          ref={warningRef}\n        >\n          <HazardIcon />\n          <Box marginLeft=\"4\" marginRight=\"8\">\n            {warningMessage}\n          </Box>\n          {!!disableListButton ? (\n            <Box paddingTop=\"6\">\n              <XMarkIcon fill=\"textSecondary\" height=\"20\" width=\"20\" />\n            </Box>\n          ) : (\n            <Row\n              marginLeft=\"72\"\n              cursor=\"pointer\"\n              color=\"genieBlue\"\n              onClick={() => {\n                setShowWarning(false)\n                setCanContinue(true)\n                onClick()\n              }}\n            >\n              Continue\n              <ArrowRightIcon height=\"20\" width=\"20\" />\n            </Row>\n          )}\n        </Row>\n      )}\n      <Box\n        as=\"button\"\n        border=\"none\"\n        backgroundColor=\"genieBlue\"\n        cursor={\n          [ListingStatus.APPROVED, ListingStatus.PENDING, ListingStatus.SIGNING].includes(listingStatus) ||\n          disableListButton\n            ? 'default'\n            : 'pointer'\n        }\n        color=\"explicitWhite\"\n        className={styles.button}\n        onClick={() => listingStatus !== ListingStatus.APPROVED && warningWrappedClick()}\n        type=\"button\"\n        style={{\n          opacity:\n            ![ListingStatus.DEFINED, ListingStatus.FAILED, ListingStatus.CONTINUE].includes(listingStatus) ||\n            disableListButton\n              ? 0.3\n              : 1,\n        }}\n      >\n        {listingStatus === ListingStatus.SIGNING || listingStatus === ListingStatus.PENDING ? (\n          <Row gap=\"8\">\n            <LoadingIcon stroke=\"backgroundSurface\" height=\"20\" width=\"20\" />\n            {listingStatus === ListingStatus.PENDING ? 'Pending' : 'Proceed in wallet'}\n          </Row>\n        ) : listingStatus === ListingStatus.APPROVED ? (\n          'Complete!'\n        ) : listingStatus === ListingStatus.PAUSED ? (\n          'Paused'\n        ) : listingStatus === ListingStatus.FAILED ? (\n          'Try again'\n        ) : listingStatus === ListingStatus.CONTINUE ? (\n          'Continue'\n        ) : (\n          buttonText\n        )}\n      </Box>\n    </Box>\n  )\n}\n"],"sourceRoot":""}