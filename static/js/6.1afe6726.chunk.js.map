{"version":3,"sources":["assets/images/welcomeModal-dark.jpg","assets/images/welcomeModal-dark@2x.jpg","assets/images/welcomeModal-dark@3x.jpg","assets/images/welcomeModal-light.jpg","assets/images/welcomeModal-light@2x.jpg","assets/images/welcomeModal-light@3x.jpg","nft/components/explore/CollectionTable.tsx","nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/TrendingCollections.tsx","nft/components/explore/WelcomeModal.tsx","nft/pages/explore/index.tsx"],"names":["ColumnHeaders","CarouselContainer","styled","div","CarouselCardContainer","theme","breakpoint","md","CarouselItemCard","a","CarouselItemIcon","textPrimary","sm","opacity","hover","MAX_CARD_WIDTH","Carousel","children","activeIndex","toggleNextSlide","idx","useCallback","x","l","length","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","useSprings","springs","set","prev","useRef","runSprings","y","vy","Math","floor","position","prevPosition","current","rank","calculateRank","immediate","config","tension","friction","direction","useEffect","toggleSlide","next","interval","setInterval","clearInterval","onClick","width","height","map","style","LoadingCarousel","CarouselCardBorder","transition","duration","fast","timing","inOut","backgroundOutline","deepShadow","CardHeaderContainer","src","LoadingCardHeaderContainer","loadingAnimation","backgroundInteractive","CardHeaderColumn","IconContainer","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","img","accentTextLightPrimary","LoadingCollectionImage","LoadingTableElement","TableElement","FirstColumnTextWrapper","CardBottomContainer","MarketplaceIcon","backgroundSurface","MarketplaceRow","marketplace","floorInEth","listings","toLowerCase","alt","BodySmall","color","Number","formatNumberOrString","NumberType","NFTTokenFloorPriceTrailingZeros","MARKETS_TO_CHECK","Markets","Opensea","X2Y2","LooksRare","MARKETS_ENUM_TO_NAME","CarouselCard","collection","gqlCollection","useCollectionQuery","address","SubHeaderSmall","formatWeiToDecimal","toString","marketplaceCount","reduce","acc","cur","count","market","find","floorPrice","LoadingTable","Array","index","CollectionName","ThemedText","MediumHeader","CarouselCardHeader","useTheme","bannerImageUrl","imageUrl","fontWeight","name","isVerified","LoadingCarouselCard","BannerContainer","AbsoluteFill","BannerBackground","props","backgroundImage","darkMode","PlainBackground","opacify","userThemeColor","BannerMainArea","HeaderContainer","lg","EXCLUDED_COLLECTIONS","Banner","navigate","useNavigate","isMobile","useIsMobile","data","useQuery","fetchTrendingCollections","volumeType","timePeriod","TimePeriod","OneDay","size","refetchOnReconnect","refetchOnWindowFocus","refetchOnMount","collections","useMemo","filter","includes","slice","collectionAddresses","useLoadCollectionQuery","useState","activeCollectionIdx","setActiveCollectionIdx","onToggleNextSlide","activeCollection","fallback","TruncatedText","TruncatedSubHeader","SubHeader","TruncatedSubHeaderSmall","RoundedImage","backgroundModule","ChangeCellContainer","change","accentSuccess","accentFailure","EthContainer","CollectionTitleCell","value","logo","className","DiscreteNumberCell","volumeFormatter","getDenominatedValue","denomination","inWei","usdPrice","Denomination","ETH","parseFloat","formatEther","EthCell","denominatedValue","formattedValue","ethNumberStandardFormatter","TextComponent","BodyPrimary","TextCell","VolumeCell","ChangeCell","Caption","abs","round","table","thead","th","RankCellContainer","StyledRow","tr","stateOverlayHover","stateOverlayPressed","StyledLoadingRow","StyledHeader","disabled","click","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","useWindowSize","useTable","initialState","sortBy","desc","id","Volume","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","styles","headerGroup","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","disableSortBy","Box","as","isSorted","isSortedDesc","transform","render","row","getRowProps","original","cells","cell","cellIndex","getCellProps","maxWidth","BodySecondary","fontSize","lineHeight","_","compareFloats","b","CollectionTable","floorSort","rowA","rowB","aFloor","BigNumber","from","bFloor","gte","floorChangeSort","volumeSort","volume","volumeChangeSort","Header","accessor","Cell","Floor","sortType","AllTime","FloorChange","sortDescFirst","VolumeChange","Items","totalSupply","Owners","owners","timeOptions","label","SevenDays","ThirtyDays","ExploreContainer","FiltersRow","Filter","Selector","active","OpacityHoverState","StyledSelectorText","textSecondary","TrendingCollections","setTimePeriod","isEthToggled","setEthToggled","refetchInterval","isSuccess","fetchPrice","trendingCollections","d","volumeChange","type","floorChange","ownersChange","sales","USD","timeOption","Container","CloseButton","X","Background","Content","Title","LargeHeader","xl","Paragraph","BACKGROUND_IMAGE","dark","require","default","srcSet","light","WelcomeModal","onDismissed","isOpen","setIsOpen","dismiss","setTimeout","Modal","onSwipe","isBottomSheet","draggable","href","title","NftExplore","setBagExpanded","useBag","state","useHideNFTWelcomeModal","isModalHidden","hideModal","bagExpanded","manualClose","page","PageName","NFT_EXPLORE_PAGE","shouldLogImpression"],"mappings":"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","file":"static/js/6.1afe6726.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/welcomeModal-dark.0f21fb6b.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-dark@2x.45349aad.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-dark@3x.8ea4669c.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light.9edc986b.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light@2x.a465cde5.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light@3x.c6262e4c.jpg\";","import { BigNumber } from '@ethersproject/bignumber'\nimport { CollectionTableColumn, TimePeriod } from 'nft/types'\nimport { useMemo } from 'react'\nimport { CellProps, Column, Row } from 'react-table'\nimport { MediumOnly } from 'theme/components'\n\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\nimport { Table } from './Table'\n\nexport enum ColumnHeaders {\n  Volume = 'Volume',\n  VolumeChange = 'Volume change',\n  Floor = 'Floor',\n  FloorChange = 'Floor change',\n  Sales = 'Sales',\n  Items = 'Items',\n  Owners = 'Owners',\n}\n\nconst VOLUME_CHANGE_MAX_VALUE = 9999\n\nconst compareFloats = (a: number, b: number): 1 | -1 => {\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\n}\n\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\n  const floorSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      const aFloor = BigNumber.from(rowA.original.floor.value ?? 0)\n      const bFloor = BigNumber.from(rowB.original.floor.value ?? 0)\n\n      return aFloor.gte(bFloor) ? 1 : -1\n    }\n  }, [])\n\n  const floorChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\n    }\n  }, [])\n\n  const volumeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\n    }\n  }, [])\n\n  const volumeChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\n    }\n  }, [])\n\n  const columns: Column<CollectionTableColumn>[] = useMemo(\n    () => [\n      {\n        Header: 'Collection name',\n        accessor: 'collection',\n        Cell: CollectionTitleCell,\n        disableSortBy: true,\n      },\n      {\n        id: ColumnHeaders.Floor,\n        Header: ColumnHeaders.Floor,\n        accessor: ({ floor }) => floor.value,\n        sortType: floorSort,\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <>\n              <EthCell\n                value={cell.row.original.floor.value}\n                denomination={cell.row.original.denomination}\n                usdPrice={cell.row.original.usdPrice}\n              />\n              {timePeriod !== TimePeriod.AllTime && (\n                <MediumOnly>\n                  <ChangeCell change={cell.row.original.floor.change} />\n                </MediumOnly>\n              )}\n            </>\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.FloorChange,\n        Header: ColumnHeaders.FloorChange,\n        accessor: ({ floor }) => floor.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: floorChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : (\n            <ChangeCell change={cell.row.original.floor.change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Volume,\n        Header: ColumnHeaders.Volume,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeSort,\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <VolumeCell\n              value={cell.row.original.volume.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.VolumeChange,\n        Header: ColumnHeaders.VolumeChange,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: volumeChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          const { change } = cell.row.original.volume\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : change >= VOLUME_CHANGE_MAX_VALUE ? (\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\n          ) : (\n            <ChangeCell change={change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Items,\n        Header: ColumnHeaders.Items,\n        accessor: 'totalSupply',\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\n        },\n      },\n      {\n        Header: ColumnHeaders.Owners,\n        accessor: ({ owners }) => owners.value,\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={cell.row.original.owners} />\n        },\n      },\n    ],\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\n  )\n  return (\n    <>\n      <Table\n        smallHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.Volume,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        mediumHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\n        {...{ data, columns }}\n      />\n    </>\n  )\n}\n\nexport default CollectionTable\n","import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\nimport { a, useSprings } from 'react-spring'\nimport styled from 'styled-components/macro'\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst CarouselCardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  overflow-x: hidden;\n  max-width: 100%;\n  height: 390px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    max-width: 600px;\n  }\n`\n\nconst CarouselItemCard = styled(a.div)`\n  display: flex;\n  justify-content: center;\n  padding: 4px 12px 32px;\n  position: absolute;\n  will-change: transform;\n  width: calc(100%);\n  height: calc(100%);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    padding: 4px 32px 32px;\n  }\n`\n\nconst CarouselItemIcon = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: none;\n  user-select: none;\n  height: calc(100%);\n  padding: 4px 0 32px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    display: flex;\n  }\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\ninterface CarouselProps {\n  children: ReactNode[]\n  activeIndex: number\n  toggleNextSlide: (idx: number) => void\n}\n\nconst MAX_CARD_WIDTH = 800\n\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\n  const getPos = useCallback(\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\n    [idx]\n  )\n  const [springs, set] = useSprings(children.length, (i) => ({\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\n  }))\n  const prev = useRef([0, 1])\n\n  const runSprings = useCallback(\n    (y: number, vy: number) => {\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\n      set((i) => {\n        const position = getPos(i, firstVis, firstVisIdx)\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\n        return {\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n          config: { tension: 250, friction: 30 },\n        }\n      })\n      prev.current = [firstVis, firstVisIdx]\n    },\n    [idx, getPos, set, children.length]\n  )\n\n  const direction = useRef(0)\n\n  useEffect(() => {\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\n  }, [activeIndex, runSprings])\n\n  const toggleSlide = useCallback(\n    (next: -1 | 1) => {\n      direction.current = next\n      toggleNextSlide(next)\n    },\n    [toggleNextSlide]\n  )\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      toggleSlide(1)\n    }, 7_000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [toggleSlide, activeIndex])\n\n  return (\n    <CarouselContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n      <CarouselCardContainer>\n        {springs.map(({ x }, i) => (\n          <CarouselItemCard key={i} style={{ x }}>\n            {children[i]}\n          </CarouselItemCard>\n        ))}\n      </CarouselCardContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n    </CarouselContainer>\n  )\n}\n\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\n    {[children]}\n  </Carousel>\n)\n","import { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\nimport { loadingAnimation } from 'components/Loader/styled'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useCollectionQuery } from 'graphql/data/nft/Collection'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { Markets, TrendingCollection } from 'nft/types'\nimport { formatWeiToDecimal } from 'nft/utils'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme/components/text'\n\nconst CarouselCardBorder = styled.div`\n  width: 100%;\n  position: relative;\n  border-radius: 22px;\n  cursor: pointer;\n  border: 2px solid transparent;\n  transition-property: border-color;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n\n  :hover {\n    border: 2px solid ${({ theme }) => theme.backgroundOutline};\n  }\n\n  ::after {\n    content: '';\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 22px;\n    z-index: -1;\n    box-shadow: ${({ theme }) => theme.deepShadow};\n    transition-property: opacity;\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n  }\n\n  :hover::after {\n    opacity: 1;\n  }\n`\n\nconst CardHeaderContainer = styled.div<{ src: string }>`\n  position: relative;\n  background-image: ${({ src }) => `url(${src})`};\n  background-size: cover;\n  background-position: center;\n`\n\nconst LoadingCardHeaderContainer = styled.div`\n  position: relative;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardHeaderColumn = styled.div`\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  gap: 8px;\n  height: 202px;\n  justify-content: center;\n  padding: 0 40px;\n  z-index: 1;\n`\nconst IconContainer = styled.div`\n  display: inline;\n  vertical-align: text-bottom;\n  margin-left: 2px;\n`\nconst CollectionNameContainer = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-align: center;\n  max-height: 56px;\n`\n\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\n  width: 50%;\n`\n\nconst HeaderOverlay = styled.div`\n  position: absolute;\n  bottom: 0px;\n  top: 0px;\n  right: 0px;\n  left: 0px;\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\n  z-index: 0;\n`\n\nconst CollectionImage = styled.img`\n  width: 86px;\n  height: 86px;\n  background: ${({ theme }) => theme.accentTextLightPrimary};\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\n  border-radius: 100px;\n`\n\nconst LoadingCollectionImage = styled.div`\n  width: 86px;\n  height: 86px;\n  border-radius: 100px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst LoadingTableElement = styled(LoadingBubble)`\n  width: 50px;\n`\n\nconst TableElement = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`\n\nconst FirstColumnTextWrapper = styled.div``\n\nconst CardBottomContainer = styled.div`\n  display: grid;\n  flex: 1;\n  gap: 8px;\n  grid-template-columns: auto auto auto;\n  padding: 16px 16px 20px;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n`\n\nconst CarouselCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 20px;\n  overflow: hidden;\n  height: 100%;\n\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\n    justify-self: center;\n  }\n\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\n    justify-self: right;\n  }\n\n  @media (max-width: 396px) or ((min-width: ${({ theme }) => theme.breakpoint.sm}px) and (max-width: 880px)) {\n    ${FirstColumnTextWrapper} {\n      display: none;\n    }\n    ${TableElement} {\n      justify-self: left !important;\n    }\n    ${CardHeaderColumn} {\n      padding: 0 20px;\n    }\n  }\n`\n\ninterface MarketplaceRowProps {\n  marketplace: string\n  floorInEth?: number\n  listings?: number\n}\n\nexport const MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\n  return (\n    <>\n      <TableElement>\n        <MarketplaceIcon\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\n          alt={`${marketplace} icon`}\n        />\n        <FirstColumnTextWrapper>\n          <ThemedText.BodySmall color=\"textSecondary\">{marketplace}</ThemedText.BodySmall>\n        </FirstColumnTextWrapper>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">\n          {Number(floorInEth) > 0\n            ? `${formatNumberOrString(floorInEth, NumberType.NFTTokenFloorPriceTrailingZeros)} ETH`\n            : '-'}\n        </ThemedText.BodySmall>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">{Number(listings) > 0 ? listings : 'None'}</ThemedText.BodySmall>\n      </TableElement>\n    </>\n  )\n}\n\ninterface CarouselCardProps {\n  collection: TrendingCollection\n  onClick: () => void\n}\n\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\nconst MARKETS_ENUM_TO_NAME = {\n  [Markets.Opensea]: 'OpenSea',\n  [Markets.X2Y2]: 'X2Y2',\n  [Markets.LooksRare]: 'LooksRare',\n}\n\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\n  const gqlCollection = useCollectionQuery(collection.address)\n\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer onClick={onClick}>\n        <CarouselCardHeader collection={collection} />\n        <CardBottomContainer>\n          <>\n            <TableElement>\n              <MarketplaceIcon src=\"/nft/svgs/marketplaces/uniswap-magenta.svg\" alt=\"Uniswap icon\" />\n              <FirstColumnTextWrapper>\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\n              </FirstColumnTextWrapper>\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {formatWeiToDecimal(collection.floor.toString())} ETH Floor\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            {MARKETS_TO_CHECK.map((market) => {\n              const marketplace = gqlCollection.marketplaceCount?.find(\n                (marketplace) => marketplace.marketplace === market\n              )\n              if (!marketplace) {\n                return null\n              }\n              return (\n                <MarketplaceRow\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\n                  listings={marketplace.count}\n                  floorInEth={marketplace.floorPrice}\n                />\n              )\n            })}\n          </>\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n\nconst DEFAULT_TABLE_ELEMENTS = 12\n\nexport const LoadingTable = () => {\n  return (\n    <>\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\n        <LoadingTableElement key={index} />\n      ))}\n    </>\n  )\n}\n\nconst CollectionName = styled(ThemedText.MediumHeader)`\n  display: inline;\n  vertical-align: text-bottom;\n  line-height: 28px;\n`\n\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\n  const theme = useTheme()\n  return (\n    <CardHeaderContainer src={collection.bannerImageUrl}>\n      <CardHeaderColumn>\n        <CollectionImage src={collection.imageUrl} />\n        <CollectionNameContainer>\n          <CollectionName color={theme.accentTextLightPrimary} fontWeight=\"500\">\n            {collection.name}\n          </CollectionName>\n          {collection.isVerified && (\n            <IconContainer>\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\n            </IconContainer>\n          )}\n        </CollectionNameContainer>\n      </CardHeaderColumn>\n      <HeaderOverlay />\n    </CardHeaderContainer>\n  )\n}\n\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer>\n        {collection ? (\n          <CarouselCardHeader collection={collection} />\n        ) : (\n          <LoadingCardHeaderContainer>\n            <CardHeaderColumn>\n              <LoadingCollectionImage />\n              <LoadingCollectionNameContainer />\n            </CardHeaderColumn>\n            <HeaderOverlay />\n          </LoadingCardHeaderContainer>\n        )}\n        <CardBottomContainer>\n          <LoadingTable />\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n","import { useLoadCollectionQuery } from 'graphql/data/nft/Collection'\nimport { useIsMobile } from 'nft/hooks'\nimport { fetchTrendingCollections } from 'nft/queries'\nimport { TimePeriod } from 'nft/types'\nimport { calculateCardIndex } from 'nft/utils'\nimport { Suspense, useCallback, useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { opacify } from 'theme/utils'\n\nimport { Carousel, LoadingCarousel } from './Carousel'\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\n\nconst BannerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding-top: 32px;\n  position: relative;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding: 32px 16px 0 16px;\n  }\n`\n\nconst AbsoluteFill = styled.div`\n  position: absolute;\n  top: -96px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\n// Safari has issues with blur / overflow, forcing GPU rendering with `translate3d` fixes it\n// https://stackoverflow.com/a/71353198\nconst BannerBackground = styled(AbsoluteFill)<{ backgroundImage: string }>`\n  transform: translate3d(0, 0, 0) scaleY(1.1);\n\n  background-image: ${(props) => `url(${props.backgroundImage})`};\n  filter: blur(62px);\n\n  opacity: ${({ theme }) => (theme.darkMode ? 0.3 : 0.2)};\n`\n\nconst PlainBackground = styled(AbsoluteFill)`\n  background: ${({ theme }) => `linear-gradient(${opacify(10, theme.userThemeColor)}, transparent)`};\n`\n\nconst BannerMainArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  gap: 36px;\n  max-width: 1200px;\n  justify-content: space-between;\n  z-index: 2;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    height: 100%;\n    gap: 14px;\n    margin-top: 4px;\n    margin-bottom: 6px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  max-width: 500px;\n  font-weight: 500;\n  font-size: 72px;\n  line-height: 88px;\n  justify-content: start;\n  align-items: start;\n  align-self: center;\n  flex-shrink: 0;\n  padding-bottom: 32px;\n\n  color: ${({ theme }) => theme.textPrimary};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    font-size: 48px;\n    line-height: 67px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n    line-height: 50px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n    justify-content: center;\n    align-items: center;\n    padding-top: 0px;\n    padding-bottom: 0px;\n  }\n`\n\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\nconst TRENDING_COLLECTION_SIZE = 5\n\nconst Banner = () => {\n  const navigate = useNavigate()\n  const isMobile = useIsMobile()\n\n  const { data } = useQuery(\n    ['trendingCollections'],\n    () => {\n      return fetchTrendingCollections({\n        volumeType: 'eth',\n        timePeriod: TimePeriod.OneDay,\n        size: TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\n      })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const collections = useMemo(\n    () => data?.filter((collection) => !EXCLUDED_COLLECTIONS.includes(collection.address)).slice(0, 5),\n    [data]\n  )\n\n  // Trigger queries for the top trending collections, so that the data is immediately available if the user clicks through.\n  const collectionAddresses = useMemo(() => collections?.map(({ address }) => address), [collections])\n  useLoadCollectionQuery(collectionAddresses)\n\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\n  const onToggleNextSlide = useCallback(\n    (direction: number) => {\n      if (!collections) return\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\n    },\n    [collections]\n  )\n\n  const activeCollection = collections?.[activeCollectionIdx]\n\n  return (\n    <BannerContainer>\n      {activeCollection ? (\n        activeCollection.bannerImageUrl ? (\n          <BannerBackground backgroundImage={activeCollection.bannerImageUrl} />\n        ) : (\n          <PlainBackground />\n        )\n      ) : null}\n      <BannerMainArea>\n        <HeaderContainer>\n          Better prices. {!isMobile && <br />}\n          More listings.\n        </HeaderContainer>\n        {collections ? (\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\n            {collections.map((collection) => (\n              <Suspense fallback={<LoadingCarouselCard collection={collection} />} key={collection.address}>\n                <CarouselCard\n                  key={collection.address}\n                  collection={collection}\n                  onClick={() => navigate(`/nfts/collection/${collection.address}`)}\n                />\n              </Suspense>\n            ))}\n          </Carousel>\n        ) : (\n          <LoadingCarousel>\n            <LoadingCarouselCard />\n          </LoadingCarousel>\n        )}\n      </BannerMainArea>\n    </BannerContainer>\n  )\n}\n\nexport default Banner\n","import { formatEther } from '@ethersproject/units'\nimport { SquareArrowDownIcon, SquareArrowUpIcon, VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile } from 'nft/hooks'\nimport { Denomination } from 'nft/types'\nimport { volumeFormatter } from 'nft/utils'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from '../../../utils/currency'\nimport * as styles from './Cells.css'\n\nconst TruncatedText = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst CollectionNameContainer = styled(TruncatedText)`\n  display: flex;\n  padding: 14px 0px 14px 8px;\n  align-items: center;\n`\n\nconst CollectionName = styled(TruncatedText)`\n  margin-left: 8px;\n`\n\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\nconst TruncatedSubHeaderSmall = styled(ThemedText.SubHeaderSmall)`\n  color: ${({ theme }) => `${theme.textPrimary}`};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst RoundedImage = styled.div<{ src?: string }>`\n  height: 36px;\n  width: 36px;\n  border-radius: 36px;\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.backgroundModule)};\n  background-size: cover;\n  background-position: center;\n  flex-shrink: 0;\n`\n\nconst ChangeCellContainer = styled.div<{ change: number }>`\n  display: flex;\n  color: ${({ theme, change }) => (change >= 0 ? theme.accentSuccess : theme.accentFailure)};\n  justify-content: end;\n  align-items: center;\n  gap: 2px;\n`\n\nconst EthContainer = styled.div`\n  display: flex;\n  justify-content: end;\n`\n\ninterface CellProps {\n  value: {\n    logo?: string\n    name?: string\n    address?: string\n    isVerified?: boolean\n    value?: number\n    change?: number\n  }\n}\n\nexport const CollectionTitleCell = ({ value }: CellProps) => {\n  const isMobile = useIsMobile()\n  return (\n    <CollectionNameContainer>\n      <RoundedImage src={value.logo} />\n      <CollectionName>\n        {isMobile ? (\n          <TruncatedSubHeaderSmall>{value.name}</TruncatedSubHeaderSmall>\n        ) : (\n          <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\n        )}\n      </CollectionName>\n      {value.isVerified && (\n        <span className={styles.verifiedBadge}>\n          <VerifiedIcon />\n        </span>\n      )}\n    </CollectionNameContainer>\n  )\n}\n\nexport const DiscreteNumberCell = ({ value }: CellProps) => (\n  <span>{value.value ? volumeFormatter(value.value) : '-'}</span>\n)\n\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\n  if (denomination === Denomination.ETH) return value\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\n\n  return undefined\n}\n\nexport const EthCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, true, value, usdPrice)\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? formatWeiToDecimal(denominatedValue.toString(), true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\n\n  return (\n    <EthContainer>\n      <TextComponent>{value ? formattedValue : '-'}</TextComponent>\n    </EthContainer>\n  )\n}\n\nexport const TextCell = ({ value }: { value: string }) => <ThemedText.BodyPrimary>{value}</ThemedText.BodyPrimary>\n\nexport const VolumeCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, false, true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  return (\n    <EthContainer>\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\n    </EthContainer>\n  )\n}\n\nexport const ChangeCell = ({ change, children }: { children?: ReactNode; change?: number }) => {\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.Caption : ThemedText.BodyPrimary\n  return (\n    <ChangeCellContainer change={change ?? 0}>\n      {!change || change > 0 ? (\n        <SquareArrowUpIcon width=\"20px\" height=\"20px\" />\n      ) : (\n        <SquareArrowDownIcon width=\"20px\" height=\"20px\" />\n      )}\n      <TextComponent color=\"currentColor\">{children || `${change ? Math.abs(Math.round(change)) : 0}%`}</TextComponent>\n    </ChangeCellContainer>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#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\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZiB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGY6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRmOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkaCB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGg6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRqIHsKICBwYWRkaW5nOiAxOXB4IDE3cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5fMTI3bDhoZGs6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGluc2V0OiAwOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MS40NmRlZywgIzQ2NzNGQSAwJSwgIzk2NDZGQSAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRsOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGw6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQouXzEyN2w4aGRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1yZ3c2ZXoxeSk7Cn0=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var logo = 'rgw6ez7ax';\nexport var title = 'rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez4ax rgw6ez42f rgw6ez7lh rgw6ez423 rgw6ez429 rgw6ez2a9 rgw6ez2ex';\nexport var address = 'rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez4ax rgw6ez42f rgw6ez7lh rgw6ez423 rgw6ez429 rgw6ez2a9 rgw6ez2ex rgw6ezjx rgw6ez3l rgw6ez1jl rgw6ez15f';\nexport var verifiedBadge = 'rgw6ezjl rgw6ez41l rgw6ez2kl rgw6ez17x rgw6ez119 rgw6ez42f';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZiB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGY6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRmOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkaCB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGg6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRqIHsKICBwYWRkaW5nOiAxOXB4IDE3cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5fMTI3bDhoZGs6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGluc2V0OiAwOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MS40NmRlZywgIzQ2NzNGQSAwJSwgIzk2NDZGQSAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRsOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGw6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQouXzEyN2w4aGRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1yZ3c2ZXoxeSk7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC40cyBlYXNlOwp9Ci5fMW1vcjd2ZTggewogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KLl8xbW9yN3ZlYSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgxNTMsIDE2MSwgMTg5LCAwLjI0KTsKICBib3JkZXItc3BhY2luZzogMHB4IDQwcHg7Cn0KLl8xbW9yN3ZlZDpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVmOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWg6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1mor7ve1 rgw6ez2al rgw6ez296 rgw6ez2g3 rgw6ez2eo';\nexport var activityRow = '_1mor7ve3 rgw6ez453 rgw6ez3f rgw6ez3n';\nexport var activeRow = 'rgw6ez6jf';\nexport var timestamp = 'rgw6ez453 rgw6ezar rgw6ez4gr rgw6ez3bf rgw6ez37b rgw6ez349 rgw6ez35z rgw6ez3dr rgw6ez3gz';\nexport var marketplaceIcon = '_1mor7ve8 rgw6ez10f rgw6ez173 rgw6ez7al rgw6ez3u9 rgw6ezjx';\nexport var table = '_1mor7vea rgw6ez4m3 rgw6ez153 rgw6ez7ax rgw6ez79l';\nexport var thead = 'rgw6ezpr rgw6ez4xr rgw6ez7j5 rgw6ez7a5';\nexport var th = '_1mor7ved rgw6ezcr rgw6ezax rgw6ez7oh rgw6ez4b3 rgw6ez2l9 rgw6ez24r';\nexport var td = '_1mor7vef rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez2kl rgw6ez243 rgw6ez1h9 rgw6ez42l rgw6ez45f';\nexport var loadingTd = '_1mor7veh rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez2kx rgw6ez24f rgw6ez1h9 rgw6ez42l rgw6ez45f';","import { LoadingBubble } from 'components/Tokens/loading'\nimport { useWindowSize } from 'hooks/useWindowSize'\nimport { useIsMobile } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { GlowEffect, ThemedText } from 'theme'\n\nimport { Box } from '../../components/Box'\nimport { CollectionTableColumn } from '../../types'\nimport { ArrowRightIcon } from '../icons'\nimport { ColumnHeaders } from './CollectionTable'\nimport * as styles from './Explore.css'\n\n// Default table cell max width\nconst CELL_WIDTH = '160px'\n// Collection Name cell max widths\nconst MOBILE_CELL_WIDTH = '240px'\nconst DESKTOP_CELL_WIDTH = '360px'\n\nconst RankCellContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n  gap: 12px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-left: 8px;\n  }\n`\n\nconst StyledRow = styled.tr`\n  cursor: pointer;\n  :hover {\n    background: ${({ theme }) => theme.stateOverlayHover};\n  }\n  :active {\n    background: ${({ theme }) => theme.stateOverlayPressed};\n  }\n`\n\nconst StyledLoadingRow = styled.tr`\n  height: 80px;\n`\n\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\n\n  :hover {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\n  }\n\n  :active {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\n  }\n`\n\nconst StyledLoadingHolder = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: end;\n  align-items: center;\n`\n\nconst StyledCollectionNameHolder = styled.div`\n  display: flex;\n  margin-left: 24px;\n  gap: 8px;\n  align-items: center;\n`\n\nconst StyledImageHolder = styled(LoadingBubble)`\n  width: 36px;\n  height: 36px;\n  border-radius: 36px;\n`\n\nconst StyledRankHolder = styled(LoadingBubble)`\n  width: 8px;\n  height: 16px;\n  margin-right: 12px;\n`\n\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\n\ninterface TableProps<D extends Record<string, unknown>> {\n  columns: Column<CollectionTableColumn>[]\n  data: CollectionTableColumn[]\n  smallHiddenColumns: IdType<D>[]\n  mediumHiddenColumns: IdType<D>[]\n  largeHiddenColumns: IdType<D>[]\n}\nexport function Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  smallHiddenColumns,\n  mediumHiddenColumns,\n  largeHiddenColumns,\n  ...props\n}: TableProps<D>) {\n  const theme = useTheme()\n  const { width } = useWindowSize()\n  const isMobile = useIsMobile()\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [\n            {\n              desc: true,\n              id: ColumnHeaders.Volume,\n            },\n          ],\n        },\n        ...props,\n      },\n      useSortBy\n    )\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!width) return\n\n    if (width <= theme.breakpoint.sm) {\n      setHiddenColumns(smallHiddenColumns)\n    } else if (width <= theme.breakpoint.md) {\n      setHiddenColumns(mediumHiddenColumns)\n    } else if (width <= theme.breakpoint.lg) {\n      setHiddenColumns(largeHiddenColumns)\n    } else {\n      setHiddenColumns([])\n    }\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\n\n  if (data.length === 0) {\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\n  }\n\n  return (\n    <GlowEffect>\n      <table {...getTableProps()} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\n                    }}\n                    disabled={column.disableSortBy}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n\n            return (\n              <StyledRow\n                {...row.getRowProps()}\n                key={row.id}\n                onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\n              >\n                {row.cells.map((cell, cellIndex) => {\n                  return (\n                    <td\n                      className={styles.td}\n                      {...cell.getCellProps()}\n                      key={cellIndex}\n                      style={{\n                        maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\n                      }}\n                    >\n                      {cellIndex === 0 ? (\n                        <RankCellContainer>\n                          {!isMobile && (\n                            <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n                              {i + 1}\n                            </ThemedText.BodySecondary>\n                          )}\n                          {cell.render('Cell')}\n                        </RankCellContainer>\n                      ) : (\n                        cell.render('Cell')\n                      )}\n                    </td>\n                  )\n                })}\n              </StyledRow>\n            )\n          })}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n\ninterface LoadingTableProps {\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\n}\n\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\n  return (\n    <GlowEffect>\n      <table {...props} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? '52px' : 0,\n                    }}\n                    disabled={index === 0}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...props}>\n          {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\n            <StyledLoadingRow key={index}>\n              {[...Array(visibleColumns.length)].map((_, cellIndex) => {\n                return (\n                  <td className={styles.loadingTd} key={cellIndex}>\n                    {cellIndex === 0 ? (\n                      <StyledCollectionNameHolder>\n                        <StyledRankHolder />\n                        <StyledImageHolder />\n                        <LoadingBubble />\n                      </StyledCollectionNameHolder>\n                    ) : (\n                      <StyledLoadingHolder>\n                        <LoadingBubble />\n                      </StyledLoadingHolder>\n                    )}\n                  </td>\n                )\n              })}\n            </StyledLoadingRow>\n          ))}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n","import { OpacityHoverState } from 'components/Common'\nimport ms from 'ms.macro'\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils'\nimport { useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { fetchTrendingCollections } from '../../queries'\nimport CollectionTable from './CollectionTable'\n\nconst timeOptions: { label: string; value: TimePeriod }[] = [\n  { label: '1D', value: TimePeriod.OneDay },\n  { label: '1W', value: TimePeriod.SevenDays },\n  { label: '1M', value: TimePeriod.ThirtyDays },\n  { label: 'All', value: TimePeriod.AllTime },\n]\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 1200px;\n\n  padding-left: 16px;\n  padding-right: 16px;\n  padding-top: 36px;\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 36px;\n  line-height: 44px;\n  weight: 500;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst FiltersRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 36px;\n  margin-bottom: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n`\n\nconst Filter = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  padding: 4px;\n`\n\nconst Selector = styled.div<{ active: boolean }>`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\n`\n\nconst TrendingCollections = () => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\n  const [isEthToggled, setEthToggled] = useState(true)\n\n  const { isSuccess, data } = useQuery(\n    ['trendingCollections', timePeriod],\n    () => {\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod, size: 100 })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchInterval: 5000,\n    }\n  )\n\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: ms`1m`,\n  })\n\n  const trendingCollections = useMemo(() => {\n    if (isSuccess && data) {\n      return data.map((d) => ({\n        ...d,\n        collection: {\n          name: d.name,\n          logo: d.imageUrl,\n          address: d.address,\n          isVerified: d.isVerified,\n        },\n        volume: {\n          value: d.volume,\n          change: d.volumeChange,\n          type: 'eth' as VolumeType,\n        },\n        floor: {\n          value: d.floor,\n          change: d.floorChange,\n        },\n        owners: {\n          value: d.owners,\n          change: d.ownersChange,\n        },\n        sales: d.sales,\n        totalSupply: d.totalSupply,\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\n        usdPrice,\n      }))\n    } else return [] as CollectionTableColumn[]\n  }, [data, isSuccess, isEthToggled, usdPrice])\n\n  return (\n    <ExploreContainer>\n      <StyledHeader>Trending NFT collections</StyledHeader>\n      <FiltersRow>\n        <Filter>\n          {timeOptions.map((timeOption) => {\n            return (\n              <Selector\n                key={timeOption.value}\n                active={timeOption.value === timePeriod}\n                onClick={() => setTimePeriod(timeOption.value)}\n              >\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\n                  {timeOption.label}\n                </StyledSelectorText>\n              </Selector>\n            )\n          })}\n        </Filter>\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\n          <Selector active={isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\n              ETH\n            </StyledSelectorText>\n          </Selector>\n          <Selector active={!isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\n              USD\n            </StyledSelectorText>\n          </Selector>\n        </Filter>\n      </FiltersRow>\n      <CollectionTable data={trendingCollections} timePeriod={timePeriod} />\n    </ExploreContainer>\n  )\n}\n\nexport default TrendingCollections\n","/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport Modal from 'components/Modal'\nimport { useState } from 'react'\nimport { X } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ExternalLink } from 'theme/components'\nimport { ThemedText } from 'theme/components/text'\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  padding: 30% 24px 24px;\n  overflow: hidden;\n  height: fit-content;\n  user-select: none;\n`\n\nconst CloseButton = styled(X)`\n  position: absolute;\n  top: 20px;\n  right: 24px;\n  cursor: pointer;\n`\n\nconst Background = styled.img`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  object-fit: contain;\n`\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  z-index: 1;\n  gap: 16px;\n`\n\nconst Title = styled(ThemedText.LargeHeader)`\n  @media (max-width: ${({ theme }) => theme.breakpoint.xl}px) {\n    font-size: 20px !important;\n  }\n`\n\nconst Paragraph = styled(ThemedText.BodySecondary)`\n  line-height: 24px;\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.xl}px) {\n    font-size: 14px !important;\n    line-height: 20px;\n  }\n`\n\nconst BACKGROUND_IMAGE = {\n  dark: {\n    src: require('../../../assets/images/welcomeModal-dark.jpg').default,\n    srcSet: `\n      ${require('../../../assets/images/welcomeModal-dark@2x.jpg').default} 2x,\n      ${require('../../../assets/images/welcomeModal-dark@3x.jpg').default} 3x,\n    `,\n  },\n  light: {\n    src: require('../../../assets/images/welcomeModal-light.jpg').default,\n    srcSet: `\n      ${require('../../../assets/images/welcomeModal-light@2x.jpg').default} 2x,\n      ${require('../../../assets/images/welcomeModal-light@3x.jpg').default} 3x,\n    `,\n  },\n}\n\nexport function WelcomeModal({ onDismissed }: { onDismissed: () => void }) {\n  const [isOpen, setIsOpen] = useState(true)\n\n  const dismiss = () => {\n    setIsOpen(false)\n    setTimeout(() => onDismissed())\n  }\n\n  const theme = useTheme()\n\n  return (\n    <Modal isOpen={isOpen} onSwipe={dismiss} maxWidth={720} isBottomSheet={false}>\n      <Container>\n        <Background\n          {...(theme.darkMode ? BACKGROUND_IMAGE.dark : BACKGROUND_IMAGE.light)}\n          alt=\"Welcome modal background\"\n          draggable={false}\n        />\n        <Content>\n          <Title>Introducing Uniswap NFT</Title>\n          <Paragraph>\n            We’re excited to announce that Uniswap Labs has acquired Genie to build the marketplace for all digital\n            assets! With Uniswap NFT, you can buy and sell NFTs across all marketplaces with the full functionality of\n            Genie. Additonally, if you’ve used Genie in the past, then you may be eligible for a USDC airdrop. You can\n            connect your wallet to claim any rewards. For more details on the airdrop please read the official\n            announcement on the Uniswap Labs blog.{' '}\n            <ExternalLink\n              href=\"https://uniswap.org/blog/uniswap-nft-aggregator-announcement\"\n              title=\"Uniswap NFT aggregator announcement\"\n            >\n              Learn more.\n            </ExternalLink>\n          </Paragraph>\n          <CloseButton size={24} onClick={dismiss} />\n        </Content>\n      </Container>\n    </Modal>\n  )\n}\n","import { Trace } from '@uniswap/analytics'\nimport { PageName } from '@uniswap/analytics-events'\nimport Banner from 'nft/components/explore/Banner'\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\nimport { WelcomeModal } from 'nft/components/explore/WelcomeModal'\nimport { useBag } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useHideNFTWelcomeModal } from 'state/user/hooks'\nimport styled from 'styled-components/macro'\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    gap: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    gap: 0px;\n  }\n`\n\nconst NftExplore = () => {\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n  const [isModalHidden, hideModal] = useHideNFTWelcomeModal()\n\n  useEffect(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: false })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <Trace page={PageName.NFT_EXPLORE_PAGE} shouldLogImpression>\n        <ExploreContainer>\n          <Banner />\n          <TrendingCollections />\n        </ExploreContainer>\n        {!isModalHidden && <WelcomeModal onDismissed={hideModal} />}\n      </Trace>\n    </>\n  )\n}\n\nexport default NftExplore\n"],"sourceRoot":""}