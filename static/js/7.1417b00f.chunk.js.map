{"version":3,"sources":["nft/components/bag/BagFooter.tsx","nft/components/bag/BagFooter.css.ts","nft/components/bag/profile/ListingSection.tsx","nft/components/bag/profile/ListingModal.tsx","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts"],"names":["Footer","styled","div","theme","backgroundOutline","textPrimary","WarningIcon","AlertTriangle","accentWarning","WarningText","ThemedText","BodyPrimary","ActionButton","disabled","children","onClick","as","color","className","Warning","fontSize","lineHeight","PENDING_BAG_STATUSES","BagStatus","FETCHING_ROUTE","CONFIRMING_IN_WALLET","FETCHING_FINAL_ROUTE","PROCESSING_TRANSACTION","BagFooter","totalEthPrice","totalUsdPrice","bagStatus","fetchAssets","eventProperties","toggleWalletModal","useToggleWalletModal","useWeb3React","account","chainId","connector","connected","Boolean","setBagExpanded","useBag","state","balanceInEth","useWalletBalance","balance","sufficientBalance","useMemo","SupportedChainId","MAINNET","parseEther","gte","handleClick","buttonText","warningText","switchChain","WARNING","bagExpanded","isPending","includes","gap","paddingTop","paddingBottom","justifyContent","Box","HeadlineSmall","formatWeiToDecimal","toString","bodySmall","ethNumberStandardFormatter","events","BrowserEvent","name","EventName","NFT_BUY_BAG_PAY","element","ElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","size","stroke","ListingSection","sectionTitle","caption","undefined","title","rows","index","openIndex","isSuccessScreen","useState","isOpen","setIsOpen","notAllApproved","some","row","status","ListingStatus","APPROVED","sellAssets","useSellAsset","removeAssetMarketplace","removeRow","asset","asset_contract","address","collectionAddress","marketplace","getListingRowPrice","listingRow","newListings","find","listing","price","useEffect","allApproved","length","flexWrap","subhead","marginTop","marginBottom","style","marginRight","clsx","styles","width","fontWeight","badge","map","images","image","height","borderRadius","zIndex","src","alt","marginLeft","textOverflow","overflow","whiteSpace","maxWidth","sm","md","REJECTED","FAILED","formatEthPrice","numberToWei","SIGNING","buttonTextSmall","border","cursor","backgroundColor","e","a","stopPropagation","callback","ListingModal","provider","signer","getSigner","listings","useNFTList","setListings","collectionsRequiringApproval","setCollectionsRequiringApproval","setOpenIndex","listingStatus","setListingStatus","allCollectionsApproved","setAllCollectionsApproved","looksRareNonce","setLooksRareNonce","getLooksRareNonce","toggleCart","toggleBag","looksRareNonceRef","useRef","isMobile","useIsMobile","trace","useTrace","modal","ModalName","NFT_LISTING","subscribe","current","totalEthListingValue","getTotalEthValue","ethPriceInUSD","setEthPriceInUSD","fetchPrice","then","startListingEventProperties","collection_addresses","token_ids","tokenId","marketplaces","Array","from","Set","list_quantity","usd_value","approvalEventProperties","every","collection","PENDING","CONTINUE","resetAllRows","signListings","allCollectionsApprovedOrPaused","PAUSED","allListingsApprovedOrPaused","startListingFlow","sendAnalyticsEvent","NFT_SELL_START_LISTING","addresses","addressesByNetwork","getAddress","signerAddress","looksRareNonceFetcher","nonce","looksRareAddress","TRANSFER_MANAGER_ERC721","collectionRow","verifyStatus","approveCollectionRow","pauseAllRows","signListingRow","allListingsSigned","paused","NFT_LISTING_COMPLETED","signatures_requested","signatures_approved","filter","logListing","pauseRow","resetRow","showSuccessScreen","paddingLeft","paddingRight","headlineSmall","display","fill","themeVars","colors","overflowX","overflowY","maxHeight","pluralize","subheadSmall","ListingButton","showWarningOverride","type","dash","keyframes","Circle","circle","accentAction","TimedLoader","position","strokeWidth","strokeLinecap","transform","transformOrigin","r","cx","cy","bagRow","bagRowImage","grayscaleImage","assetName","collectionName","icon","removeAssetOverlay","RemoveButton","ThemeButton","ReviewButton","NoContentContainer","background","textAlign","left","top","BagRow","usdPrice","removeAsset","showRemove","grayscale","loadedImage","setImageLoaded","smallImageUrl","noImageAvailable","setNoImageAvailable","cardHovered","setCardHovered","handleMouseEnter","useCallback","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","ETHPrice","priceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","parseFloat","formatEther","handleRemoveClick","preventDefault","to","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","transition","onLoad","onError","visibility","loadingBlock","susFlag","collectionIsVerified","emphasis","ButtonEmphasis","medium","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","gt","handleRemove","handleKeep","borderTopColor","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","borderStyle","borderWidth","borderColor","UnavailableAssetsHeaderRow","clearUnavailableAssets","didOpenUnavailableAssets","setDidOpenUnavailableAssets","useReducer","s","toggleOpen","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","slice","id","BagContent","setBagStatus","uncheckedItemsInBag","itemsInBag","setItemsInBag","removeAssetsFromBag","recalculateBagUsingPooledAssets","fetchedPriceData","useQuery","data","unchangedAssets","item","BagItemStatus","ADDED_TO_BAG","REVIEWED","priceChangedAssets","REVIEWING_PRICE_CHANGE","unavailableAssets","UNAVAILABLE","availableItems","hasAssetsInReview","hasAssets","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","IN_REVIEW","CONFIRM_REVIEW","ADDING_TO_BAG","reverse","ClearButton","ButtonText","textSecondary","IconWrapper","button","OpacityHoverState","CounterDot","accentTextLightPrimary","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","numberOfCharacters","getCircleSizing","StyledColumn","Column","EmptyState","useIsNftProfilePage","textTertiary","ProfileAssetRow","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","magentaVibrant","ProfileBagContent","DetailsPageBackground","ScrollingIndicator","show","marginX","borderBottomColor","opacity","Bag","resetSellAssets","reset","shallow","useProfilePageState","setProfilePageState","profilePageState","bagIsLocked","isLocked","setLocked","setTotalEthPrice","setTotalUsdPrice","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","sendTransaction","useSendTransaction","transactionState","setTransactionState","setState","transactionStateRef","useTransactionResponse","setTransactionResponse","queryClient","useQueryClient","setModalIsOpen","userCanScroll","setUserCanScroll","scrollProgress","setScrollProgress","reduce","total","add","purchaseAssets","routingData","purchaseResponse","TxStateType","Success","Failed","handleCloseBag","manualClose","itemsToBuy","ethSellObject","buildSellObject","ethTotal","fetchQuery","fetchRoute","toSell","toBuy","senderAddress","updatedAssets","combineBuyItemsWithTxRoute","route","fetchedPriceChangedAssets","sort","sortUpdatedAssets","fetchedUnavailableAssets","isUnavailable","fetchedUnchangedAssets","hasReviewedAssets","hasUnavailableAssets","shouldReview","unavailableAsset","changedAsset","unchangedAsset","Confirming","Denied","Invalid","New","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","ProfilePageStateType","LISTING","ref","node","canScroll","scrollHeight","clientHeight","onScroll","event","scrollTop","currentTarget","containerHeight","paddingY","buttonTextMedium","commonButtonStyles","Overlay"],"mappings":"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","file":"static/js/7.1417b00f.chunk.js","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { parseEther } from '@ethersproject/units'\nimport { Trans } from '@lingui/macro'\nimport { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, ElementName, EventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport Loader from 'components/Loader'\nimport { SupportedChainId } from 'constants/chains'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { bodySmall } from 'nft/css/common.css'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport { PropsWithChildren, useMemo } from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport { useToggleWalletModal } from 'state/application/hooks'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { switchChain } from 'utils/switchChain'\n\nimport * as styles from './BagFooter.css'\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n  color: ${({ theme }) => theme.textPrimary};\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 8px;\n  padding: 12px 16px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: ${({ theme }) => theme.accentWarning};\n`\nconst WarningText = styled(ThemedText.BodyPrimary)`\n  align-items: center;\n  color: ${({ theme }) => theme.accentWarning};\n  display: flex;\n  justify-content: center;\n  margin: 12px 0 !important;\n  text-align: center;\n`\n\ninterface ActionButtonProps {\n  disabled?: boolean\n  onClick: () => void\n}\n\nconst ActionButton = ({ disabled, children, onClick }: PropsWithChildren<ActionButtonProps>) => {\n  return (\n    <Row as=\"button\" color=\"explicitWhite\" className={styles.payButton} disabled={disabled} onClick={onClick}>\n      {children}\n    </Row>\n  )\n}\n\nconst Warning = ({ children }: PropsWithChildren<unknown>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText fontSize=\"14px\" lineHeight=\"20px\">\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\ninterface BagFooterProps {\n  totalEthPrice: BigNumber\n  totalUsdPrice: number | undefined\n  bagStatus: BagStatus\n  fetchAssets: () => void\n  eventProperties: Record<string, unknown>\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\nexport const BagFooter = ({\n  totalEthPrice,\n  totalUsdPrice,\n  bagStatus,\n  fetchAssets,\n  eventProperties,\n}: BagFooterProps) => {\n  const toggleWalletModal = useToggleWalletModal()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== SupportedChainId.MAINNET) {\n      return undefined\n    }\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, balanceInEth, totalEthPrice])\n\n  const { buttonText, disabled, warningText, handleClick } = useMemo(() => {\n    let handleClick = fetchAssets\n    let buttonText = <Trans>Something went wrong</Trans>\n    let disabled = true\n    let warningText = null\n\n    if (connected && chainId !== SupportedChainId.MAINNET) {\n      handleClick = () => switchChain(connector, SupportedChainId.MAINNET)\n      buttonText = <Trans>Switch networks</Trans>\n      disabled = false\n      warningText = <Trans>Wrong network</Trans>\n    } else if (sufficientBalance === false) {\n      buttonText = <Trans>Pay</Trans>\n      disabled = true\n      warningText = <Trans>Insufficient funds</Trans>\n    } else if (bagStatus === BagStatus.WARNING) {\n      warningText = <Trans>Something went wrong. Please try again.</Trans>\n    } else if (!connected) {\n      handleClick = () => {\n        toggleWalletModal()\n        setBagExpanded({ bagExpanded: false })\n      }\n      disabled = false\n      buttonText = <Trans>Connect wallet</Trans>\n    } else if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      disabled = true\n      buttonText = <Trans>Proceed in wallet</Trans>\n    } else if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      disabled = true\n      buttonText = <Trans>Transaction pending</Trans>\n    } else if (sufficientBalance === true) {\n      disabled = false\n      buttonText = <Trans>Pay</Trans>\n    }\n\n    return { buttonText, disabled, warningText, handleClick }\n  }, [bagStatus, chainId, connected, connector, fetchAssets, setBagExpanded, sufficientBalance, toggleWalletModal])\n\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n\n  return (\n    <Column className={styles.footerContainer}>\n      <Footer>\n        <Column gap=\"4\" paddingTop=\"8\" paddingBottom=\"20\">\n          <Row justifyContent=\"space-between\">\n            <Box>\n              <ThemedText.HeadlineSmall>Total</ThemedText.HeadlineSmall>\n            </Box>\n            <Box>\n              <ThemedText.HeadlineSmall>\n                {formatWeiToDecimal(totalEthPrice.toString())}&nbsp;ETH\n              </ThemedText.HeadlineSmall>\n            </Box>\n          </Row>\n          <Row justifyContent=\"flex-end\" color=\"textSecondary\" className={bodySmall}>\n            {`${ethNumberStandardFormatter(totalUsdPrice, true)}`}\n          </Row>\n        </Column>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={EventName.NFT_BUY_BAG_PAY}\n          element={ElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...eventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning>{warningText}</Warning>\n          <ActionButton onClick={handleClick} disabled={disabled}>\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n    </Column>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZiB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGY6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRmOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkaCB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGg6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRqIHsKICBwYWRkaW5nOiAxOXB4IDE3cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5fMTI3bDhoZGs6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGluc2V0OiAwOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MS40NmRlZywgIzQ2NzNGQSAwJSwgIzk2NDZGQSAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRsOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGw6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQouXzEyN2w4aGRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1yZ3c2ZXoxeSk7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagFooter.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagFooter.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Lm0yOWtwajQ6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuNjsKICBjdXJzb3I6IGF1dG87Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var footerContainer = 'rgw6ez2al rgw6ez2g3';\nexport var footer = 'rgw6ez2al rgw6ez2g3 rgw6ez2l9 rgw6ez24r rgw6ez4lr rgw6ez4ax rgw6ez7fl rgw6ez7h5';\nexport var payButton = 'm29kpj4 rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez2l9 rgw6ez24r rgw6ez4k9 rgw6ez7id rgw6ez7ax rgw6ezd3 rgw6ez79d rgw6ez443 rgw6ez3q9';","import clsx from 'clsx'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ApprovedCheckmarkIcon, ChevronUpIcon, FailedListingIcon, LoadingIcon } from 'nft/components/icons'\nimport { badge, bodySmall, buttonTextSmall, subhead } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { formatEthPrice, numberToWei } from 'nft/utils/currency'\nimport { useEffect, useState } from 'react'\n\nimport * as styles from './ListingModal.css'\n\nexport const ListingSection = ({\n  sectionTitle,\n  caption = undefined,\n  title = undefined,\n  rows,\n  index,\n  openIndex,\n  isSuccessScreen = false,\n}: {\n  sectionTitle: string\n  caption?: string\n  title?: string\n  rows: AssetRow[]\n  index: number\n  openIndex: number\n  isSuccessScreen?: boolean\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const notAllApproved = rows.some((row: AssetRow) => row.status !== ListingStatus.APPROVED)\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\n\n  const removeRow = (row: any) => {\n    // collections\n    if (index === 1) {\n      for (const asset of sellAssets)\n        if (asset.asset_contract.address === row.collectionAddress) removeAssetMarketplace(asset, row.marketplace)\n    }\n    // listings\n    else removeAssetMarketplace(row.asset, row.marketplace)\n  }\n\n  useEffect(() => {\n    setIsOpen(index === openIndex)\n  }, [index, openIndex])\n\n  function getListingRowPrice(row: AssetRow): number | undefined {\n    const listingRow = row as ListingRow\n    const newListings = listingRow.asset.newListings\n    return newListings?.find((listing) => listing.marketplace.name === listingRow.marketplace.name)?.price ?? 0\n  }\n\n  const allApproved = !notAllApproved && rows.length > 0 && !isSuccessScreen\n\n  return (\n    <Row\n      flexWrap=\"wrap\"\n      className={subhead}\n      marginTop=\"10\"\n      marginBottom=\"10\"\n      onClick={() => rows.length > 0 && setIsOpen(!isOpen)}\n      color={allApproved ? 'accentSuccess' : 'textPrimary'}\n    >\n      {allApproved && <ApprovedCheckmarkIcon style={{ marginRight: '8px' }} />}\n      {sectionTitle}\n      {!isSuccessScreen && <ChevronUpIcon className={clsx(`${isOpen ? '' : styles.chevronDown} ${styles.chevron}`)} />}\n      {(isOpen || isSuccessScreen) && (\n        <Column\n          gap=\"12\"\n          width=\"full\"\n          paddingTop={isSuccessScreen ? '28' : 'auto'}\n          className={clsx(!isSuccessScreen && styles.listingSectionBorder)}\n        >\n          {caption && (\n            <Box color=\"textPrimary\" fontWeight=\"normal\" className={caption}>\n              {caption}\n            </Box>\n          )}\n          {title && (\n            <Box color=\"textSecondary\" className={badge}>\n              {title}\n            </Box>\n          )}\n          <Column gap=\"8\">\n            {rows.map((row: AssetRow, index) => {\n              return (\n                <Column key={index} gap=\"8\">\n                  <Row>\n                    {row.images.map((image, index) => {\n                      return (\n                        <Box\n                          as=\"img\"\n                          height=\"20\"\n                          width=\"20\"\n                          borderRadius={index === 0 && (row as CollectionRow).collectionAddress ? 'round' : '4'}\n                          style={{ zIndex: 2 - index }}\n                          className={styles.listingModalIcon}\n                          src={image}\n                          alt={row.name}\n                          key={index}\n                        />\n                      )\n                    })}\n                    <Box\n                      marginLeft=\"8\"\n                      marginRight=\"auto\"\n                      fontWeight=\"normal\"\n                      color=\"textPrimary\"\n                      textOverflow=\"ellipsis\"\n                      overflow=\"hidden\"\n                      whiteSpace=\"nowrap\"\n                      maxWidth={{\n                        sm: 'max',\n                        md:\n                          row.status === ListingStatus.REJECTED || row.status === ListingStatus.FAILED ? '120' : 'full',\n                      }}\n                      className={bodySmall}\n                    >\n                      {row.name}\n                    </Box>\n                    {isSuccessScreen ? (\n                      getListingRowPrice(row) &&\n                      `${formatEthPrice(numberToWei(getListingRowPrice(row) ?? 0).toString())} ETH`\n                    ) : row.status === ListingStatus.APPROVED ? (\n                      <ApprovedCheckmarkIcon height=\"20\" width=\"20\" />\n                    ) : row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED ? (\n                      <Row gap=\"4\">\n                        <Box fontWeight=\"normal\" fontSize=\"14\" color=\"textSecondary\">\n                          {row.status}\n                        </Box>\n                        <FailedListingIcon />\n                      </Row>\n                    ) : (\n                      row.status === ListingStatus.SIGNING && <LoadingIcon height=\"20\" width=\"20\" stroke=\"#4673FA\" />\n                    )}\n                  </Row>\n                  {(row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED) && (\n                    <Row gap=\"8\" justifyContent=\"center\">\n                      <Box\n                        width=\"120\"\n                        as=\"button\"\n                        className={buttonTextSmall}\n                        borderRadius=\"12\"\n                        border=\"none\"\n                        color=\"red400\"\n                        height=\"32\"\n                        cursor=\"pointer\"\n                        style={{ backgroundColor: '#FA2B391A' }}\n                        onClick={async (e) => {\n                          e.stopPropagation()\n                          removeRow(row)\n                        }}\n                      >\n                        Remove\n                      </Box>\n                      <Box\n                        width=\"120\"\n                        as=\"button\"\n                        className={buttonTextSmall}\n                        borderRadius=\"12\"\n                        border=\"none\"\n                        color=\"genieBlue\"\n                        height=\"32\"\n                        cursor=\"pointer\"\n                        style={{ backgroundColor: '#4C82FB29' }}\n                        onClick={async (e) => {\n                          e.stopPropagation()\n                          if (row.callback) {\n                            await row.callback()\n                          }\n                        }}\n                      >\n                        Try again\n                      </Box>\n                    </Row>\n                  )}\n                </Column>\n              )\n            })}\n          </Column>\n        </Column>\n      )}\n    </Row>\n  )\n}\n","import { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\nimport { sendAnalyticsEvent, Trace, useTrace } from '@uniswap/analytics'\nimport { EventName, ModalName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ChevronLeftIcon, XMarkIcon } from 'nft/components/icons'\nimport { caption, headlineSmall, subhead, subheadSmall } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useBag, useIsMobile, useNFTList, useSellAsset } from 'nft/hooks'\nimport { logListing, looksRareNonceFetcher } from 'nft/queries'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { Dispatch, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { ListingButton } from './ListingButton'\nimport * as styles from './ListingModal.css'\nimport { ListingSection } from './ListingSection'\nimport { approveCollectionRow, getTotalEthValue, pauseRow, resetRow, signListingRow, verifyStatus } from './utils'\n\nconst ListingModal = () => {\n  const { provider } = useWeb3React()\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const signer = provider?.getSigner()\n  const listings = useNFTList((state) => state.listings)\n  const setListings = useNFTList((state) => state.setListings)\n  const collectionsRequiringApproval = useNFTList((state) => state.collectionsRequiringApproval)\n  const setCollectionsRequiringApproval = useNFTList((state) => state.setCollectionsRequiringApproval)\n  const [openIndex, setOpenIndex] = useState(0)\n  const listingStatus = useNFTList((state) => state.listingStatus)\n  const setListingStatus = useNFTList((state) => state.setListingStatus)\n  const [allCollectionsApproved, setAllCollectionsApproved] = useState(false)\n  const looksRareNonce = useNFTList((state) => state.looksRareNonce)\n  const setLooksRareNonce = useNFTList((state) => state.setLooksRareNonce)\n  const getLooksRareNonce = useNFTList((state) => state.getLooksRareNonce)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const looksRareNonceRef = useRef(looksRareNonce)\n  const isMobile = useIsMobile()\n  const trace = useTrace({ modal: ModalName.NFT_LISTING })\n\n  useEffect(() => {\n    useNFTList.subscribe((state) => (looksRareNonceRef.current = state.looksRareNonce))\n  }, [])\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n\n  const [ethPriceInUSD, setEthPriceInUSD] = useState(0)\n\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthPriceInUSD(price || 0)\n    })\n  }, [])\n\n  const startListingEventProperties = {\n    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n    token_ids: sellAssets.map((asset) => asset.tokenId),\n    marketplaces: Array.from(new Set(listings.map((asset) => asset.marketplace.name))),\n    list_quantity: listings.length,\n    usd_value: ethPriceInUSD * totalEthListingValue,\n    ...trace,\n  }\n\n  const approvalEventProperties = {\n    list_quantity: listings.length,\n    usd_value: ethPriceInUSD * totalEthListingValue,\n    ...trace,\n  }\n\n  // when all collections have been approved, auto start the signing process\n  useEffect(() => {\n    collectionsRequiringApproval?.length &&\n      setAllCollectionsApproved(\n        collectionsRequiringApproval.every((collection: CollectionRow) => collection.status === ListingStatus.APPROVED)\n      )\n    if (\n      allCollectionsApproved &&\n      (listingStatus === ListingStatus.PENDING ||\n        listingStatus === ListingStatus.CONTINUE ||\n        listingStatus === ListingStatus.SIGNING)\n    ) {\n      resetAllRows()\n      signListings()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collectionsRequiringApproval, allCollectionsApproved])\n\n  const allCollectionsApprovedOrPaused = useMemo(\n    () =>\n      collectionsRequiringApproval.every(\n        (collection: CollectionRow) =>\n          collection.status === ListingStatus.APPROVED || collection.status === ListingStatus.PAUSED\n      ),\n    [collectionsRequiringApproval]\n  )\n  const allListingsApprovedOrPaused = useMemo(\n    () =>\n      listings.every(\n        (listing: ListingRow) => listing.status === ListingStatus.APPROVED || listing.status === ListingStatus.PAUSED\n      ),\n    [listings]\n  )\n\n  // go back to a ready state after a successful retry\n  useEffect(() => {\n    if (listingStatus === ListingStatus.SIGNING && allCollectionsApprovedOrPaused && allListingsApprovedOrPaused) {\n      resetAllRows()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allCollectionsApprovedOrPaused, allListingsApprovedOrPaused])\n\n  // handles the modal wide listing state based on conglomeration of the wallet, collection, and listing states\n  const startListingFlow = async () => {\n    if (!signer) return\n    sendAnalyticsEvent(EventName.NFT_SELL_START_LISTING, { ...startListingEventProperties })\n    setListingStatus(ListingStatus.SIGNING)\n    const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n    const signerAddress = await signer.getAddress()\n    const nonce = await looksRareNonceFetcher(signerAddress)\n    setLooksRareNonce(nonce ?? 0)\n\n    if (!collectionsRequiringApproval?.some((collection) => collection.status === ListingStatus.PAUSED)) {\n      setListingStatus(ListingStatus.SIGNING)\n      setOpenIndex(1)\n    }\n    const looksRareAddress = addresses.TRANSFER_MANAGER_ERC721\n    // for all unique collection, marketplace combos -> approve collections\n    for (const collectionRow of collectionsRequiringApproval) {\n      verifyStatus(collectionRow.status) &&\n        (isMobile\n          ? await approveCollectionRow(\n              collectionRow,\n              collectionsRequiringApproval,\n              setCollectionsRequiringApproval,\n              signer,\n              looksRareAddress,\n              pauseAllRows\n            )\n          : approveCollectionRow(\n              collectionRow,\n              collectionsRequiringApproval,\n              setCollectionsRequiringApproval,\n              signer,\n              looksRareAddress,\n              pauseAllRows\n            ))\n    }\n  }\n\n  const signListings = async () => {\n    if (!signer || !provider) return\n    setListingStatus(ListingStatus.SIGNING)\n    setOpenIndex(2)\n    // sign listings\n    for (const listing of listings) {\n      verifyStatus(listing.status) &&\n        (await signListingRow(\n          listing,\n          listings,\n          setListings,\n          signer,\n          provider,\n          getLooksRareNonce,\n          setLooksRareNonce,\n          pauseAllRows\n        ))\n    }\n    const allListingsSigned = listings.every((listing: ListingRow) => listing.status === ListingStatus.APPROVED)\n    const paused = listings.some((listing: ListingRow) => listing.status === ListingStatus.PAUSED)\n    if (allListingsSigned) {\n      setOpenIndex(0)\n      setListingStatus(ListingStatus.APPROVED)\n    } else if (!paused) {\n      setListingStatus(ListingStatus.FAILED)\n    }\n    sendAnalyticsEvent(EventName.NFT_LISTING_COMPLETED, {\n      signatures_requested: listings.length,\n      signatures_approved: listings.filter((asset) => asset.status === ListingStatus.APPROVED),\n      ...approvalEventProperties,\n    })\n    await logListing(listings, (await signer?.getAddress()) ?? '')\n  }\n\n  const pauseAllRows = () => {\n    for (const collection of collectionsRequiringApproval) {\n      pauseRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\n    }\n    for (const listing of listings) {\n      pauseRow(listing, listings, setListings as Dispatch<AssetRow[]>)\n    }\n  }\n\n  const resetAllRows = () => {\n    for (const collection of collectionsRequiringApproval) {\n      resetRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\n    }\n    for (const listing of listings) {\n      resetRow(listing, listings, setListings as Dispatch<AssetRow[]>)\n    }\n  }\n\n  const clickStopListing = () => {\n    pauseAllRows()\n  }\n\n  const clickStartListingFlow = () => {\n    resetAllRows()\n    allCollectionsApproved ? signListings() : startListingFlow()\n  }\n\n  const showSuccessScreen = useMemo(() => listingStatus === ListingStatus.APPROVED, [listingStatus])\n\n  return (\n    <Trace modal={ModalName.NFT_LISTING}>\n      <Column paddingTop=\"20\" paddingBottom=\"20\" paddingLeft=\"12\" paddingRight=\"12\">\n        <Row className={headlineSmall} marginBottom=\"10\">\n          {isMobile && !showSuccessScreen && (\n            <Box paddingTop=\"4\" marginRight=\"4\" onClick={toggleCart}>\n              <ChevronLeftIcon height={28} width={28} />\n            </Box>\n          )}\n          {showSuccessScreen ? 'Success!' : `Listing ${sellAssets.length} NFTs`}\n          <Box\n            as=\"button\"\n            border=\"none\"\n            color=\"textSecondary\"\n            backgroundColor=\"backgroundSurface\"\n            marginLeft=\"auto\"\n            marginRight=\"0\"\n            paddingRight=\"0\"\n            display={{ sm: 'flex', md: 'none' }}\n            cursor=\"pointer\"\n            onClick={toggleCart}\n          >\n            <XMarkIcon height={28} width={28} fill={themeVars.colors.textPrimary} />\n          </Box>\n        </Row>\n        <Column overflowX=\"hidden\" overflowY=\"auto\" style={{ maxHeight: '60vh' }}>\n          {showSuccessScreen ? (\n            <Trace\n              name={EventName.NFT_LISTING_COMPLETED}\n              properties={{ list_quantity: listings.length, usd_value: ethPriceInUSD * totalEthListingValue, ...trace }}\n            >\n              <ListingSection\n                sectionTitle={`Listed ${listings.length} item${pluralize(listings.length)} for sale`}\n                rows={listings}\n                index={0}\n                openIndex={openIndex}\n                isSuccessScreen={true}\n              />\n            </Trace>\n          ) : (\n            <>\n              <ListingSection\n                sectionTitle={`Approve ${collectionsRequiringApproval.length} collection${pluralize(\n                  collectionsRequiringApproval.length\n                )}`}\n                title=\"COLLECTIONS\"\n                rows={collectionsRequiringApproval}\n                index={1}\n                openIndex={openIndex}\n              />\n              <ListingSection\n                sectionTitle={`Confirm ${listings.length} listing${pluralize(listings.length)}`}\n                caption=\"Now you can sign to list each item\"\n                title=\"NFTS\"\n                rows={listings}\n                index={2}\n                openIndex={openIndex}\n              />\n            </>\n          )}\n        </Column>\n        <hr className={styles.sectionDivider} />\n        <Row className={subhead} marginTop=\"12\" marginBottom={showSuccessScreen ? '8' : '20'}>\n          Return if sold\n          <Row className={subheadSmall} marginLeft=\"auto\" marginRight=\"0\">\n            {totalEthListingValue}\n            &nbsp;ETH\n          </Row>\n        </Row>\n        {showSuccessScreen ? (\n          <Box as=\"span\" className={caption} color=\"textSecondary\">\n            Status:{' '}\n            <Box as=\"span\" color=\"accentSuccess\">\n              Confirmed\n            </Box>\n          </Box>\n        ) : (\n          <ListingButton onClick={clickStartListingFlow} buttonText=\"Start listing\" showWarningOverride={isMobile} />\n        )}\n        {(listingStatus === ListingStatus.PENDING || listingStatus === ListingStatus.SIGNING) && (\n          <Box\n            as=\"button\"\n            border=\"none\"\n            backgroundColor=\"backgroundSurface\"\n            cursor=\"pointer\"\n            color=\"orange\"\n            className={styles.button}\n            onClick={clickStopListing}\n            type=\"button\"\n          >\n            Stop listing\n          </Box>\n        )}\n      </Column>\n    </Trace>\n  )\n}\n\nexport default ListingModal\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components/macro'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accentAction};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZiB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGY6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRmOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkaCB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGg6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRqIHsKICBwYWRkaW5nOiAxOXB4IDE3cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5fMTI3bDhoZGs6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGluc2V0OiAwOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MS40NmRlZywgIzQ2NzNGQSAwJSwgIzk2NDZGQSAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRsOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGw6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQouXzEyN2w4aGRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1yZ3c2ZXoxeSk7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var bagRow = '_1kuawc1 rgw6ez2a9 rgw6ez2fr rgw6ez2kx rgw6ez24f rgw6ez4ax rgw6ez3px rgw6ez79d rgw6ez1br rgw6ez7ax';\nexport var unavailableAssetsContainer = 'rgw6ez2ll rgw6ez253 rgw6ezjx rgw6ezpf rgw6ez4pl rgw6ez3px rgw6ez4ax rgw6ez79p rgw6ez7j5 rgw6ez51l rgw6ez5yl rgw6ez5mf rgw6ez1br';\nexport var priceChangeColumn = 'rgw6ez2ll rgw6ez253 rgw6ezjx rgw6ezpf rgw6ez4pl rgw6ez3pl rgw6ez4ax rgw6ez79p rgw6ez7j5 rgw6ez51l rgw6ez5mf rgw6ez1br rgw6ez79d';\nexport var priceChangeRow = 'rgw6ezcr rgw6ezax rgw6ez7oh rgw6ez48r rgw6ez3p9';\nexport var bagRowImage = 'rgw6ez12r rgw6ez19f rgw6ez463 rgw6ez7ap';\nexport var grayscaleImage = '_1kuawc7';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3p9 rgw6ezb3 rgw6ezd3 rgw6ez3u9';\nexport var assetName = '_1kuawcb rgw6ezb3 rgw6ezcx rgw6ez7lh rgw6ez429 rgw6ez423';\nexport var collectionName = 'rgw6ezcr rgw6ezax rgw6ez7oh rgw6ez7lh rgw6ez423 rgw6ez429 rgw6ez4b3';\nexport var icon = 'rgw6ez3u9';\nexport var removeAssetOverlay = 'rgw6ez453 rgw6ez36l rgw6ez3c3';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/collection/Card'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\n    true\n  )\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          <Box\n            display={showRemove && isMobile ? 'block' : 'none'}\n            className={styles.removeAssetOverlay}\n            onClick={handleRemoveClick}\n            transition=\"250\"\n            zIndex=\"1\"\n          >\n            <CircularCloseIcon />\n          </Box>\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\n          asset.priceInfo.ETHPrice\n        )} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice: number | undefined\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"backgroundSurface\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"textPrimary\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { sendAnalyticsEvent, Trace } from '@uniswap/analytics'\nimport { EventName } from '@uniswap/analytics-events'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\nimport { useQuery } from 'react-query'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(EventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: fetchedPriceData,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={EventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: fetchedPriceData,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={fetchedPriceData}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={fetchedPriceData}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column gap=\"8\">\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={fetchedPriceData}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components/macro'\nimport { ButtonText, ThemedText } from 'theme'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 20px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 14\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>Clear all</ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components/macro'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\n        ) : (\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center className={subhead}>No NFTs selected</Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { CircularCloseIcon, VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\nimport { colors } from 'theme/colors'\n\nimport { RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        <Box\n          display={isMobile ? 'block' : 'none'}\n          className={styles.removeAssetOverlay}\n          onClick={handleRemoveAsset}\n          transition=\"250\"\n          zIndex=\"1\"\n        >\n          <CircularCloseIcon />\n        </Box>\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} fill={colors.magentaVibrant} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useWeb3React } from '@web3-react/core'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport ListingModal from 'nft/components/bag/profile/ListingModal'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { buttonTextMedium, commonButtonStyles } from 'nft/css/common.css'\nimport {\n  useBag,\n  useIsMobile,\n  useProfilePageState,\n  useSellAsset,\n  useSendTransaction,\n  useTransactionResponse,\n} from 'nft/hooks'\nimport { fetchRoute } from 'nft/queries'\nimport { BagItemStatus, BagStatus, ProfilePageStateType, RouteResponse, TxStateType } from 'nft/types'\nimport {\n  buildSellObject,\n  fetchPrice,\n  formatAssetEventProperties,\n  recalculateBagUsingPooledAssets,\n  sortUpdatedAssets,\n} from 'nft/utils'\nimport { combineBuyItemsWithTxRoute } from 'nft/utils/txRoute/combineItemsWithTxRoute'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useQuery, useQueryClient } from 'react-query'\nimport styled from 'styled-components/macro'\nimport shallow from 'zustand/shallow'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  backdrop-filter: blur(12px);\n  top: 72px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"16\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { account, provider } = useWeb3React()\n\n  const { resetSellAssets, sellAssets } = useSellAsset(\n    ({ reset, sellAssets }) => ({\n      resetSellAssets: reset,\n      sellAssets,\n    }),\n    shallow\n  )\n\n  const { profilePageState, setProfilePageState } = useProfilePageState(\n    ({ setProfilePageState, state }) => ({ profilePageState: state, setProfilePageState }),\n    shallow\n  )\n\n  const {\n    bagStatus,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    bagIsLocked,\n    setLocked,\n    reset,\n    setItemsInBag,\n    bagExpanded,\n    toggleBag,\n    setTotalEthPrice,\n    setTotalUsdPrice,\n    setBagExpanded,\n  } = useBag((state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }), shallow)\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const [setTransactionResponse] = useTransactionResponse((state) => [state.setTransactionResponse])\n\n  const queryClient = useQueryClient()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isOpen, setModalIsOpen] = useState(false)\n  const [userCanScroll, setUserCanScroll] = useState(false)\n  const [scrollProgress, setScrollProgress] = useState(0)\n  const scrollRef = (node: HTMLDivElement) => {\n    if (node !== null) {\n      const canScroll = node.scrollHeight > node.clientHeight\n      canScroll !== userCanScroll && setUserCanScroll(canScroll)\n    }\n  }\n\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  const { totalEthPrice, totalUsdPrice } = useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n    const totalUsdPrice = fetchedPriceData ? parseFloat(formatEther(totalEthPrice)) * fetchedPriceData : undefined\n\n    return { totalEthPrice, totalUsdPrice }\n  }, [itemsInBag, fetchedPriceData])\n\n  const purchaseAssets = async (routingData: RouteResponse) => {\n    if (!provider || !routingData) return\n    const purchaseResponse = await sendTransaction(\n      provider?.getSigner(),\n      itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset),\n      routingData\n    )\n    if (\n      purchaseResponse &&\n      (transactionStateRef.current === TxStateType.Success || transactionStateRef.current === TxStateType.Failed)\n    ) {\n      setLocked(false)\n      setModalIsOpen(false)\n      setTransactionResponse(purchaseResponse)\n      setBagExpanded({ bagExpanded: false })\n      reset()\n    }\n  }\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  const fetchAssets = async () => {\n    const itemsToBuy = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n    const ethSellObject = buildSellObject(\n      itemsToBuy\n        .reduce((ethTotal, asset) => ethTotal.add(BigNumber.from(asset.priceInfo.ETHPrice)), BigNumber.from(0))\n        .toString()\n    )\n\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n    try {\n      const data = await queryClient.fetchQuery(['assetsRoute', ethSellObject, itemsToBuy, account], () =>\n        fetchRoute({\n          toSell: [ethSellObject],\n          toBuy: itemsToBuy,\n          senderAddress: account ?? '',\n        })\n      )\n\n      const updatedAssets = combineBuyItemsWithTxRoute(itemsToBuy, data.route)\n\n      const fetchedPriceChangedAssets = updatedAssets.filter((asset) => asset.updatedPriceInfo).sort(sortUpdatedAssets)\n      const fetchedUnavailableAssets = updatedAssets.filter((asset) => asset.isUnavailable)\n      const fetchedUnchangedAssets = updatedAssets.filter((asset) => !asset.updatedPriceInfo && !asset.isUnavailable)\n      const hasReviewedAssets = fetchedUnchangedAssets.length > 0\n      const hasAssetsInReview = fetchedPriceChangedAssets.length > 0\n      const hasUnavailableAssets = fetchedUnavailableAssets.length > 0\n      const hasAssets = hasReviewedAssets || hasAssetsInReview || hasUnavailableAssets\n      const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n      setItemsInBag([\n        ...fetchedUnavailableAssets.map((unavailableAsset) => ({\n          asset: unavailableAsset,\n          status: BagItemStatus.UNAVAILABLE,\n        })),\n        ...fetchedPriceChangedAssets.map((changedAsset) => ({\n          asset: changedAsset,\n          status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n        })),\n        ...fetchedUnchangedAssets.map((unchangedAsset) => ({ asset: unchangedAsset, status: BagItemStatus.REVIEWED })),\n      ])\n      setLocked(false)\n\n      if (hasAssets) {\n        if (!shouldReview) {\n          purchaseAssets(data)\n          setBagStatus(BagStatus.CONFIRMING_IN_WALLET)\n        } else if (!hasAssetsInReview) setBagStatus(BagStatus.CONFIRM_REVIEW)\n        else {\n          setBagStatus(BagStatus.IN_REVIEW)\n        }\n      } else {\n        setBagStatus(BagStatus.ADDING_TO_BAG)\n      }\n    } catch (error) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (bagIsLocked && !isOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isOpen])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) setBagStatus(BagStatus.WARNING)\n      else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transactionStateRef.current])\n\n  useEffect(() => {\n    setTotalEthPrice(totalEthPrice)\n    setTotalUsdPrice(totalUsdPrice)\n  }, [totalEthPrice, totalUsdPrice, setTotalEthPrice, setTotalUsdPrice])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement>) => {\n    const scrollTop = event.currentTarget.scrollTop\n    const containerHeight = event.currentTarget.clientHeight\n    const scrollHeight = event.currentTarget.scrollHeight\n\n    setScrollProgress(scrollTop ? ((scrollTop + containerHeight) / scrollHeight) * 100 : 0)\n  }\n\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      usd_value: totalUsdPrice,\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag, totalUsdPrice]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <Column zIndex={isMobile || isOpen ? 'modalOverTooltip' : '3'} className={styles.bagContainer}>\n        {!(isProfilePage && profilePageState === ProfilePageStateType.LISTING) ? (\n          <>\n            <BagHeader\n              numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n              closeBag={handleCloseBag}\n              resetFlow={isProfilePage ? resetSellAssets : reset}\n              isProfilePage={isProfilePage}\n            />\n            {shouldRenderEmptyState && <EmptyState />}\n            <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n            <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n              {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n            </Column>\n            {hasAssetsToShow && !isProfilePage && (\n              <BagFooter\n                totalEthPrice={totalEthPrice}\n                totalUsdPrice={totalUsdPrice}\n                bagStatus={bagStatus}\n                fetchAssets={fetchAssets}\n                eventProperties={eventProperties}\n              />\n            )}\n            {isSellingAssets && isProfilePage && (\n              <Box\n                marginTop=\"32\"\n                marginX=\"28\"\n                paddingY=\"10\"\n                className={`${buttonTextMedium} ${commonButtonStyles}`}\n                backgroundColor=\"accentAction\"\n                color=\"white\"\n                textAlign=\"center\"\n                onClick={() => {\n                  isMobile && toggleBag()\n                  setProfilePageState(ProfilePageStateType.LISTING)\n                }}\n              >\n                Continue\n              </Box>\n            )}\n          </>\n        ) : (\n          <ListingModal />\n        )}\n      </Column>\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMyB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjM6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjEgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var bagContainer = '_1jcz50r1 rgw6ez459 rgw6ez3bl rgw6ez3fg rgw6ez153 rgw6ez1br rgw6ez363 rgw6ez4m3 rgw6ez79x rgw6ez4y3 rgw6ez7j5 rgw6ez4ax';\nexport var assetsContainer = '_1jcz50r3 rgw6ez2al rgw6ez2g3 rgw6ez1vr rgw6ez7mt';"],"sourceRoot":""}